<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="3616"><g><title>bench`OUTLINED_FUNCTION_269 (1 samples, 0.03%)</title><rect x="0.0000%" y="229" width="0.0277%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>bench`aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (1 samples, 0.03%)</title><rect x="0.0277%" y="229" width="0.0277%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2777%" y="239.50"></text></g><g><title>bench`aho_corasick::dfa::Builder::build_from_noncontiguous (1 samples, 0.03%)</title><rect x="0.0277%" y="213" width="0.0277%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2777%" y="223.50"></text></g><g><title>bench`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.06%)</title><rect x="0.0553%" y="197" width="0.0553%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.3053%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_5860 (1 samples, 0.03%)</title><rect x="0.0830%" y="181" width="0.0277%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3330%" y="191.50"></text></g><g><title>bench`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.08%)</title><rect x="0.0553%" y="213" width="0.0830%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="3"/><text x="0.3053%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4046 (1 samples, 0.03%)</title><rect x="0.1106%" y="197" width="0.0277%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.3606%" y="207.50"></text></g><g><title>bench`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.03%)</title><rect x="0.1383%" y="197" width="0.0277%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.3883%" y="207.50"></text></g><g><title>bench`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="0.1659%" y="133" width="0.0277%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="0.4159%" y="143.50"></text></g><g><title>bench`&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.06%)</title><rect x="0.1659%" y="197" width="0.0553%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="2"/><text x="0.4159%" y="207.50"></text></g><g><title>bench`&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.06%)</title><rect x="0.1659%" y="181" width="0.0553%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="2"/><text x="0.4159%" y="191.50"></text></g><g><title>bench`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.06%)</title><rect x="0.1659%" y="165" width="0.0553%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="2"/><text x="0.4159%" y="175.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.06%)</title><rect x="0.1659%" y="149" width="0.0553%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="2"/><text x="0.4159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="0.1936%" y="133" width="0.0277%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.4436%" y="143.50"></text></g><g><title>bench`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.2489%" y="181" width="0.0277%" height="15" fill="rgb(217,207,13)" fg:x="9" fg:w="1"/><text x="0.4989%" y="191.50"></text></g><g><title>bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.08%)</title><rect x="0.2212%" y="197" width="0.0830%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="3"/><text x="0.4712%" y="207.50"></text></g><g><title>bench`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="0.2765%" y="181" width="0.0277%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="1"/><text x="0.5265%" y="191.50"></text></g><g><title>bench`&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_map (7 samples, 0.19%)</title><rect x="0.1383%" y="213" width="0.1936%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="7"/><text x="0.3883%" y="223.50"></text></g><g><title>bench`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.03%)</title><rect x="0.3042%" y="197" width="0.0277%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="1"/><text x="0.5542%" y="207.50"></text></g><g><title>bench`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="0.3319%" y="213" width="0.0277%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="0.5819%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_469 (1 samples, 0.03%)</title><rect x="0.3595%" y="197" width="0.0277%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="1"/><text x="0.6095%" y="207.50"></text></g><g><title>bench`&lt;tokenizers::tokenizer::serialization::TokenizerVisitor&lt;M,N,PT,PP,D&gt; as serde::de::Visitor&gt;::visit_map (15 samples, 0.41%)</title><rect x="0.0000%" y="245" width="0.4148%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="15"/><text x="0.2500%" y="255.50"></text></g><g><title>bench`tokenizers::models::_::_&lt;impl serde::de::Deserialize for tokenizers::models::ModelWrapper&gt;::deserialize (13 samples, 0.36%)</title><rect x="0.0553%" y="229" width="0.3595%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="13"/><text x="0.3053%" y="239.50"></text></g><g><title>bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="0.3595%" y="213" width="0.0553%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="2"/><text x="0.6095%" y="223.50"></text></g><g><title>bench`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.03%)</title><rect x="0.3872%" y="197" width="0.0277%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="0.6372%" y="207.50"></text></g><g><title>bench`candle_transformers::models::bert::BertEmbeddings::load (26 samples, 0.72%)</title><rect x="0.4148%" y="245" width="0.7190%" height="15" fill="rgb(249,31,29)" fg:x="15" fg:w="26"/><text x="0.6648%" y="255.50"></text></g><g><title>bench`candle_nn::embedding::embedding (26 samples, 0.72%)</title><rect x="0.4148%" y="229" width="0.7190%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="26"/><text x="0.6648%" y="239.50"></text></g><g><title>bench`candle_nn::var_builder::VarBuilderArgs&lt;B&gt;::get_with_hints (26 samples, 0.72%)</title><rect x="0.4148%" y="213" width="0.7190%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="26"/><text x="0.6648%" y="223.50"></text></g><g><title>bench`&lt;candle_core::safetensors::MmapedSafetensors as candle_nn::var_builder::SimpleBackend&gt;::get (26 samples, 0.72%)</title><rect x="0.4148%" y="197" width="0.7190%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="26"/><text x="0.6648%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::from_slice (26 samples, 0.72%)</title><rect x="0.4148%" y="181" width="0.7190%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="26"/><text x="0.6648%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.72%)</title><rect x="0.4148%" y="165" width="0.7190%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="26"/><text x="0.6648%" y="175.50"></text></g><g><title>bench`candle_nn::var_builder::VarBuilderArgs&lt;B&gt;::push_prefix (1 samples, 0.03%)</title><rect x="1.1338%" y="213" width="0.0277%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="1"/><text x="1.3838%" y="223.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="1.1338%" y="197" width="0.0277%" height="15" fill="rgb(213,181,19)" fg:x="41" fg:w="1"/><text x="1.3838%" y="207.50"></text></g><g><title>bench`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.72%)</title><rect x="1.1338%" y="229" width="0.7190%" height="15" fill="rgb(254,191,54)" fg:x="41" fg:w="26"/><text x="1.3838%" y="239.50"></text></g><g><title>bench`candle_transformers::models::with_tracing::linear (25 samples, 0.69%)</title><rect x="1.1615%" y="213" width="0.6914%" height="15" fill="rgb(241,83,37)" fg:x="42" fg:w="25"/><text x="1.4115%" y="223.50"></text></g><g><title>bench`candle_nn::var_builder::VarBuilderArgs&lt;B&gt;::get_with_hints (25 samples, 0.69%)</title><rect x="1.1615%" y="197" width="0.6914%" height="15" fill="rgb(233,36,39)" fg:x="42" fg:w="25"/><text x="1.4115%" y="207.50"></text></g><g><title>bench`&lt;candle_core::safetensors::MmapedSafetensors as candle_nn::var_builder::SimpleBackend&gt;::get (25 samples, 0.69%)</title><rect x="1.1615%" y="181" width="0.6914%" height="15" fill="rgb(226,3,54)" fg:x="42" fg:w="25"/><text x="1.4115%" y="191.50"></text></g><g><title>bench`candle_core::tensor::Tensor::from_slice (25 samples, 0.69%)</title><rect x="1.1615%" y="165" width="0.6914%" height="15" fill="rgb(245,192,40)" fg:x="42" fg:w="25"/><text x="1.4115%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.69%)</title><rect x="1.1615%" y="149" width="0.6914%" height="15" fill="rgb(238,167,29)" fg:x="42" fg:w="25"/><text x="1.4115%" y="159.50"></text></g><g><title>bench`candle_transformers::models::bert::BertEncoder::load (27 samples, 0.75%)</title><rect x="1.1338%" y="245" width="0.7467%" height="15" fill="rgb(232,182,51)" fg:x="41" fg:w="27"/><text x="1.3838%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_5942 (1 samples, 0.03%)</title><rect x="1.8529%" y="229" width="0.0277%" height="15" fill="rgb(231,60,39)" fg:x="67" fg:w="1"/><text x="2.1029%" y="239.50"></text></g><g><title>bench`serde_json::de::from_str (1 samples, 0.03%)</title><rect x="1.8805%" y="245" width="0.0277%" height="15" fill="rgb(208,69,12)" fg:x="68" fg:w="1"/><text x="2.1305%" y="255.50"></text></g><g><title>bench`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.03%)</title><rect x="1.8805%" y="229" width="0.0277%" height="15" fill="rgb(235,93,37)" fg:x="68" fg:w="1"/><text x="2.1305%" y="239.50"></text></g><g><title>bench`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.03%)</title><rect x="1.8805%" y="213" width="0.0277%" height="15" fill="rgb(213,116,39)" fg:x="68" fg:w="1"/><text x="2.1305%" y="223.50"></text></g><g><title>bench`bench::lib::build_model_and_tokenizer (70 samples, 1.94%)</title><rect x="0.0000%" y="261" width="1.9358%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="70"/><text x="0.2500%" y="271.50">b..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="1.9082%" y="245" width="0.0277%" height="15" fill="rgb(206,96,30)" fg:x="69" fg:w="1"/><text x="2.1582%" y="255.50"></text></g><g><title>bench`bench::lib::Model::create (71 samples, 1.96%)</title><rect x="0.0000%" y="277" width="1.9635%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="71"/><text x="0.2500%" y="287.50">b..</text></g><g><title>bench`core::ptr::drop_in_place&lt;core::option::Option&lt;tokenizers::tokenizer::added_vocabulary::AddedTokenWithId&gt;&gt; (1 samples, 0.03%)</title><rect x="1.9358%" y="261" width="0.0277%" height="15" fill="rgb(250,191,14)" fg:x="70" fg:w="1"/><text x="2.1858%" y="271.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (3 samples, 0.08%)</title><rect x="1.9635%" y="229" width="0.0830%" height="15" fill="rgb(239,60,40)" fg:x="71" fg:w="3"/><text x="2.2135%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_5314 (1 samples, 0.03%)</title><rect x="2.0465%" y="229" width="0.0277%" height="15" fill="rgb(206,27,48)" fg:x="74" fg:w="1"/><text x="2.2965%" y="239.50"></text></g><g><title>bench`&lt;candle_core::tensor::Tensor as core::ops::arith::Add&lt;B&gt;&gt;::add (7 samples, 0.19%)</title><rect x="1.9635%" y="261" width="0.1936%" height="15" fill="rgb(225,35,8)" fg:x="71" fg:w="7"/><text x="2.2135%" y="271.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (7 samples, 0.19%)</title><rect x="1.9635%" y="245" width="0.1936%" height="15" fill="rgb(250,213,24)" fg:x="71" fg:w="7"/><text x="2.2135%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_598 (3 samples, 0.08%)</title><rect x="2.0741%" y="229" width="0.0830%" height="15" fill="rgb(247,123,22)" fg:x="75" fg:w="3"/><text x="2.3241%" y="239.50"></text></g><g><title>bench`&lt;candle_nn::embedding::Embedding as candle_core::Module&gt;::forward (1 samples, 0.03%)</title><rect x="2.1571%" y="261" width="0.0277%" height="15" fill="rgb(231,138,38)" fg:x="78" fg:w="1"/><text x="2.4071%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="2.1571%" y="245" width="0.0277%" height="15" fill="rgb(231,145,46)" fg:x="78" fg:w="1"/><text x="2.4071%" y="255.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="2.3783%" y="213" width="0.0277%" height="15" fill="rgb(251,118,11)" fg:x="86" fg:w="1"/><text x="2.6283%" y="223.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (1 samples, 0.03%)</title><rect x="2.3783%" y="197" width="0.0277%" height="15" fill="rgb(217,147,25)" fg:x="86" fg:w="1"/><text x="2.6283%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="2.3783%" y="181" width="0.0277%" height="15" fill="rgb(247,81,37)" fg:x="86" fg:w="1"/><text x="2.6283%" y="191.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (5 samples, 0.14%)</title><rect x="2.4060%" y="197" width="0.1383%" height="15" fill="rgb(209,12,38)" fg:x="87" fg:w="5"/><text x="2.6560%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_178 (1 samples, 0.03%)</title><rect x="2.5442%" y="197" width="0.0277%" height="15" fill="rgb(227,1,9)" fg:x="92" fg:w="1"/><text x="2.7942%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_388 (2 samples, 0.06%)</title><rect x="2.5719%" y="197" width="0.0553%" height="15" fill="rgb(248,47,43)" fg:x="93" fg:w="2"/><text x="2.8219%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_add (10 samples, 0.28%)</title><rect x="2.3783%" y="229" width="0.2765%" height="15" fill="rgb(221,10,30)" fg:x="86" fg:w="10"/><text x="2.6283%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (9 samples, 0.25%)</title><rect x="2.4060%" y="213" width="0.2489%" height="15" fill="rgb(210,229,1)" fg:x="87" fg:w="9"/><text x="2.6560%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4010 (1 samples, 0.03%)</title><rect x="2.6272%" y="197" width="0.0277%" height="15" fill="rgb(222,148,37)" fg:x="95" fg:w="1"/><text x="2.8772%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="2.6549%" y="133" width="0.0277%" height="15" fill="rgb(234,67,33)" fg:x="96" fg:w="1"/><text x="2.9049%" y="143.50"></text></g><g><title>bench`&lt;candle_transformers::models::with_tracing::Linear as candle_core::Module&gt;::forward (12 samples, 0.33%)</title><rect x="2.3783%" y="245" width="0.3319%" height="15" fill="rgb(247,98,35)" fg:x="86" fg:w="12"/><text x="2.6283%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::matmul (2 samples, 0.06%)</title><rect x="2.6549%" y="229" width="0.0553%" height="15" fill="rgb(247,138,52)" fg:x="96" fg:w="2"/><text x="2.9049%" y="239.50"></text></g><g><title>bench`gemm_f32::gemm::f32::neon::gemm_basic (2 samples, 0.06%)</title><rect x="2.6549%" y="213" width="0.0553%" height="15" fill="rgb(213,79,30)" fg:x="96" fg:w="2"/><text x="2.9049%" y="223.50"></text></g><g><title>bench`gemm_common::gemm::par_for_each::inner (2 samples, 0.06%)</title><rect x="2.6549%" y="197" width="0.0553%" height="15" fill="rgb(246,177,23)" fg:x="96" fg:w="2"/><text x="2.9049%" y="207.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.06%)</title><rect x="2.6549%" y="181" width="0.0553%" height="15" fill="rgb(230,62,27)" fg:x="96" fg:w="2"/><text x="2.9049%" y="191.50"></text></g><g><title>bench`rayon_core::latch::LockLatch::wait_and_reset (2 samples, 0.06%)</title><rect x="2.6549%" y="165" width="0.0553%" height="15" fill="rgb(216,154,8)" fg:x="96" fg:w="2"/><text x="2.9049%" y="175.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (2 samples, 0.06%)</title><rect x="2.6549%" y="149" width="0.0553%" height="15" fill="rgb(244,35,45)" fg:x="96" fg:w="2"/><text x="2.9049%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="2.6825%" y="133" width="0.0277%" height="15" fill="rgb(251,115,12)" fg:x="97" fg:w="1"/><text x="2.9325%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="2.6825%" y="117" width="0.0277%" height="15" fill="rgb(240,54,50)" fg:x="97" fg:w="1"/><text x="2.9325%" y="127.50"></text></g><g><title>bench`DYLD-STUB$$tanhf (2 samples, 0.06%)</title><rect x="2.7102%" y="245" width="0.0553%" height="15" fill="rgb(233,84,52)" fg:x="98" fg:w="2"/><text x="2.9602%" y="255.50"></text></g><g><title>bench`&lt;candle_transformers::models::bert::BertIntermediate as candle_core::Module&gt;::forward (108 samples, 2.99%)</title><rect x="2.1847%" y="261" width="2.9867%" height="15" fill="rgb(207,117,47)" fg:x="79" fg:w="108"/><text x="2.4347%" y="271.50">ben..</text></g><g><title>bench`core::ops::function::FnMut::call_mut (87 samples, 2.41%)</title><rect x="2.7655%" y="245" width="2.4060%" height="15" fill="rgb(249,43,39)" fg:x="100" fg:w="87"/><text x="3.0155%" y="255.50">be..</text></g><g><title>libsystem_m.dylib`tanhf (82 samples, 2.27%)</title><rect x="2.9038%" y="229" width="2.2677%" height="15" fill="rgb(209,38,44)" fg:x="105" fg:w="82"/><text x="3.1538%" y="239.50">l..</text></g><g><title>bench`OUTLINED_FUNCTION_976 (1 samples, 0.03%)</title><rect x="5.1991%" y="213" width="0.0277%" height="15" fill="rgb(236,212,23)" fg:x="188" fg:w="1"/><text x="5.4491%" y="223.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (8 samples, 0.22%)</title><rect x="5.2268%" y="197" width="0.2212%" height="15" fill="rgb(242,79,21)" fg:x="189" fg:w="8"/><text x="5.4768%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_178 (1 samples, 0.03%)</title><rect x="5.4480%" y="197" width="0.0277%" height="15" fill="rgb(211,96,35)" fg:x="197" fg:w="1"/><text x="5.6980%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_388 (2 samples, 0.06%)</title><rect x="5.4757%" y="197" width="0.0553%" height="15" fill="rgb(253,215,40)" fg:x="198" fg:w="2"/><text x="5.7257%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_add (14 samples, 0.39%)</title><rect x="5.1991%" y="229" width="0.3872%" height="15" fill="rgb(211,81,21)" fg:x="188" fg:w="14"/><text x="5.4491%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (13 samples, 0.36%)</title><rect x="5.2268%" y="213" width="0.3595%" height="15" fill="rgb(208,190,38)" fg:x="189" fg:w="13"/><text x="5.4768%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4010 (2 samples, 0.06%)</title><rect x="5.5310%" y="197" width="0.0553%" height="15" fill="rgb(235,213,38)" fg:x="200" fg:w="2"/><text x="5.7810%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_6581 (1 samples, 0.03%)</title><rect x="5.6139%" y="213" width="0.0277%" height="15" fill="rgb(237,122,38)" fg:x="203" fg:w="1"/><text x="5.8639%" y="223.50"></text></g><g><title>bench`alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="5.6416%" y="213" width="0.0277%" height="15" fill="rgb(244,218,35)" fg:x="204" fg:w="1"/><text x="5.8916%" y="223.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="5.6416%" y="197" width="0.0277%" height="15" fill="rgb(240,68,47)" fg:x="204" fg:w="1"/><text x="5.8916%" y="207.50"></text></g><g><title>bench`alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="5.6416%" y="181" width="0.0277%" height="15" fill="rgb(210,16,53)" fg:x="204" fg:w="1"/><text x="5.8916%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="5.6416%" y="165" width="0.0277%" height="15" fill="rgb(235,124,12)" fg:x="204" fg:w="1"/><text x="5.8916%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="5.6416%" y="149" width="0.0277%" height="15" fill="rgb(224,169,11)" fg:x="204" fg:w="1"/><text x="5.8916%" y="159.50"></text></g><g><title>bench`candle_core::tensor::from_storage (1 samples, 0.03%)</title><rect x="5.6692%" y="213" width="0.0277%" height="15" fill="rgb(250,166,2)" fg:x="205" fg:w="1"/><text x="5.9192%" y="223.50"></text></g><g><title>bench`candle_core::layout::Layout::contiguous_with_offset (1 samples, 0.03%)</title><rect x="5.6692%" y="197" width="0.0277%" height="15" fill="rgb(242,216,29)" fg:x="205" fg:w="1"/><text x="5.9192%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_3107 (1 samples, 0.03%)</title><rect x="5.6692%" y="181" width="0.0277%" height="15" fill="rgb(230,116,27)" fg:x="205" fg:w="1"/><text x="5.9192%" y="191.50"></text></g><g><title>bench`candle_core::utils::get_num_threads (1 samples, 0.03%)</title><rect x="5.6969%" y="213" width="0.0277%" height="15" fill="rgb(228,99,48)" fg:x="206" fg:w="1"/><text x="5.9469%" y="223.50"></text></g><g><title>libsystem_c.dylib`sysconf (1 samples, 0.03%)</title><rect x="5.6969%" y="197" width="0.0277%" height="15" fill="rgb(253,11,6)" fg:x="206" fg:w="1"/><text x="5.9469%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (1 samples, 0.03%)</title><rect x="5.6969%" y="181" width="0.0277%" height="15" fill="rgb(247,143,39)" fg:x="206" fg:w="1"/><text x="5.9469%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (11 samples, 0.30%)</title><rect x="5.7246%" y="133" width="0.3042%" height="15" fill="rgb(236,97,10)" fg:x="207" fg:w="11"/><text x="5.9746%" y="143.50"></text></g><g><title>bench`rayon_core::latch::LockLatch::wait_and_reset (12 samples, 0.33%)</title><rect x="5.7246%" y="165" width="0.3319%" height="15" fill="rgb(233,208,19)" fg:x="207" fg:w="12"/><text x="5.9746%" y="175.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (12 samples, 0.33%)</title><rect x="5.7246%" y="149" width="0.3319%" height="15" fill="rgb(216,164,2)" fg:x="207" fg:w="12"/><text x="5.9746%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="6.0288%" y="133" width="0.0277%" height="15" fill="rgb(220,129,5)" fg:x="218" fg:w="1"/><text x="6.2788%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="6.0288%" y="117" width="0.0277%" height="15" fill="rgb(242,17,10)" fg:x="218" fg:w="1"/><text x="6.2788%" y="127.50"></text></g><g><title>bench`&lt;candle_transformers::models::with_tracing::Linear as candle_core::Module&gt;::forward (32 samples, 0.88%)</title><rect x="5.1991%" y="245" width="0.8850%" height="15" fill="rgb(242,107,0)" fg:x="188" fg:w="32"/><text x="5.4491%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::matmul (18 samples, 0.50%)</title><rect x="5.5863%" y="229" width="0.4978%" height="15" fill="rgb(251,28,31)" fg:x="202" fg:w="18"/><text x="5.8363%" y="239.50"></text></g><g><title>bench`gemm_f32::gemm::f32::neon::gemm_basic (13 samples, 0.36%)</title><rect x="5.7246%" y="213" width="0.3595%" height="15" fill="rgb(233,223,10)" fg:x="207" fg:w="13"/><text x="5.9746%" y="223.50"></text></g><g><title>bench`gemm_common::gemm::par_for_each::inner (13 samples, 0.36%)</title><rect x="5.7246%" y="197" width="0.3595%" height="15" fill="rgb(215,21,27)" fg:x="207" fg:w="13"/><text x="5.9746%" y="207.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (13 samples, 0.36%)</title><rect x="5.7246%" y="181" width="0.3595%" height="15" fill="rgb(232,23,21)" fg:x="207" fg:w="13"/><text x="5.9746%" y="191.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.03%)</title><rect x="6.0564%" y="165" width="0.0277%" height="15" fill="rgb(244,5,23)" fg:x="219" fg:w="1"/><text x="6.3064%" y="175.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (1 samples, 0.03%)</title><rect x="6.0564%" y="149" width="0.0277%" height="15" fill="rgb(226,81,46)" fg:x="219" fg:w="1"/><text x="6.3064%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="6.0564%" y="133" width="0.0277%" height="15" fill="rgb(247,70,30)" fg:x="219" fg:w="1"/><text x="6.3064%" y="143.50"></text></g><g><title>bench`OUTLINED_FUNCTION_338 (1 samples, 0.03%)</title><rect x="6.0841%" y="245" width="0.0277%" height="15" fill="rgb(212,68,19)" fg:x="220" fg:w="1"/><text x="6.3341%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_7 (1 samples, 0.03%)</title><rect x="6.1117%" y="245" width="0.0277%" height="15" fill="rgb(240,187,13)" fg:x="221" fg:w="1"/><text x="6.3617%" y="255.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="6.1394%" y="245" width="0.0277%" height="15" fill="rgb(223,113,26)" fg:x="222" fg:w="1"/><text x="6.3894%" y="255.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (1 samples, 0.03%)</title><rect x="6.1394%" y="229" width="0.0277%" height="15" fill="rgb(206,192,2)" fg:x="222" fg:w="1"/><text x="6.3894%" y="239.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="6.1394%" y="213" width="0.0277%" height="15" fill="rgb(241,108,4)" fg:x="222" fg:w="1"/><text x="6.3894%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="6.1394%" y="197" width="0.0277%" height="15" fill="rgb(247,173,49)" fg:x="222" fg:w="1"/><text x="6.3894%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_div (1 samples, 0.03%)</title><rect x="6.1670%" y="245" width="0.0277%" height="15" fill="rgb(224,114,35)" fg:x="223" fg:w="1"/><text x="6.4170%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::div (1 samples, 0.03%)</title><rect x="6.1670%" y="229" width="0.0277%" height="15" fill="rgb(245,159,27)" fg:x="223" fg:w="1"/><text x="6.4170%" y="239.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (1 samples, 0.03%)</title><rect x="6.1670%" y="213" width="0.0277%" height="15" fill="rgb(245,172,44)" fg:x="223" fg:w="1"/><text x="6.4170%" y="223.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (1 samples, 0.03%)</title><rect x="6.1947%" y="213" width="0.0277%" height="15" fill="rgb(236,23,11)" fg:x="224" fg:w="1"/><text x="6.4447%" y="223.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_sub (2 samples, 0.06%)</title><rect x="6.1947%" y="245" width="0.0553%" height="15" fill="rgb(205,117,38)" fg:x="224" fg:w="2"/><text x="6.4447%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::sub (2 samples, 0.06%)</title><rect x="6.1947%" y="229" width="0.0553%" height="15" fill="rgb(237,72,25)" fg:x="224" fg:w="2"/><text x="6.4447%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4010 (1 samples, 0.03%)</title><rect x="6.2223%" y="213" width="0.0277%" height="15" fill="rgb(244,70,9)" fg:x="225" fg:w="1"/><text x="6.4723%" y="223.50"></text></g><g><title>bench`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="6.2500%" y="229" width="0.0277%" height="15" fill="rgb(217,125,39)" fg:x="226" fg:w="1"/><text x="6.5000%" y="239.50"></text></g><g><title>bench`alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="6.2777%" y="229" width="0.0277%" height="15" fill="rgb(235,36,10)" fg:x="227" fg:w="1"/><text x="6.5277%" y="239.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="6.2777%" y="213" width="0.0277%" height="15" fill="rgb(251,123,47)" fg:x="227" fg:w="1"/><text x="6.5277%" y="223.50"></text></g><g><title>bench`alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="6.2777%" y="197" width="0.0277%" height="15" fill="rgb(221,13,13)" fg:x="227" fg:w="1"/><text x="6.5277%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="6.2777%" y="181" width="0.0277%" height="15" fill="rgb(238,131,9)" fg:x="227" fg:w="1"/><text x="6.5277%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="6.2777%" y="165" width="0.0277%" height="15" fill="rgb(211,50,8)" fg:x="227" fg:w="1"/><text x="6.5277%" y="175.50"></text></g><g><title>bench`candle_core::utils::get_num_threads (3 samples, 0.08%)</title><rect x="6.3053%" y="229" width="0.0830%" height="15" fill="rgb(245,182,24)" fg:x="228" fg:w="3"/><text x="6.5553%" y="239.50"></text></g><g><title>libsystem_c.dylib`sysconf (3 samples, 0.08%)</title><rect x="6.3053%" y="213" width="0.0830%" height="15" fill="rgb(242,14,37)" fg:x="228" fg:w="3"/><text x="6.5553%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (3 samples, 0.08%)</title><rect x="6.3053%" y="197" width="0.0830%" height="15" fill="rgb(246,228,12)" fg:x="228" fg:w="3"/><text x="6.5553%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.03%)</title><rect x="6.4159%" y="181" width="0.0277%" height="15" fill="rgb(213,55,15)" fg:x="232" fg:w="1"/><text x="6.6659%" y="191.50"></text></g><g><title>bench`alloc::vec::from_elem (2 samples, 0.06%)</title><rect x="6.4159%" y="213" width="0.0553%" height="15" fill="rgb(209,9,3)" fg:x="232" fg:w="2"/><text x="6.6659%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="6.4159%" y="197" width="0.0553%" height="15" fill="rgb(230,59,30)" fg:x="232" fg:w="2"/><text x="6.6659%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="6.4436%" y="181" width="0.0277%" height="15" fill="rgb(209,121,21)" fg:x="233" fg:w="1"/><text x="6.6936%" y="191.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (10 samples, 0.28%)</title><rect x="6.5542%" y="197" width="0.2765%" height="15" fill="rgb(220,109,13)" fg:x="237" fg:w="10"/><text x="6.8042%" y="207.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x3x4 (1 samples, 0.03%)</title><rect x="6.8308%" y="197" width="0.0277%" height="15" fill="rgb(232,18,1)" fg:x="247" fg:w="1"/><text x="7.0808%" y="207.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (15 samples, 0.41%)</title><rect x="6.4712%" y="213" width="0.4148%" height="15" fill="rgb(215,41,42)" fg:x="234" fg:w="15"/><text x="6.7212%" y="223.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (1 samples, 0.03%)</title><rect x="6.8584%" y="197" width="0.0277%" height="15" fill="rgb(224,123,36)" fg:x="248" fg:w="1"/><text x="7.1084%" y="207.50"></text></g><g><title>bench`gemm_f32::gemm::f32::neon::gemm_basic (19 samples, 0.53%)</title><rect x="6.3883%" y="229" width="0.5254%" height="15" fill="rgb(240,125,3)" fg:x="231" fg:w="19"/><text x="6.6383%" y="239.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (1 samples, 0.03%)</title><rect x="6.8861%" y="213" width="0.0277%" height="15" fill="rgb(205,98,50)" fg:x="249" fg:w="1"/><text x="7.1361%" y="223.50"></text></g><g><title>bench`candle_core::tensor::Tensor::matmul (25 samples, 0.69%)</title><rect x="6.2500%" y="245" width="0.6914%" height="15" fill="rgb(205,185,37)" fg:x="226" fg:w="25"/><text x="6.5000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="6.9137%" y="229" width="0.0277%" height="15" fill="rgb(238,207,15)" fg:x="250" fg:w="1"/><text x="7.1637%" y="239.50"></text></g><g><title>bench`&lt;candle_core::cpu::neon::CurrentCpu as candle_core::cpu::Cpu&lt;_&gt;&gt;::zero_array (2 samples, 0.06%)</title><rect x="6.9414%" y="229" width="0.0553%" height="15" fill="rgb(213,199,42)" fg:x="251" fg:w="2"/><text x="7.1914%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::sum_impl (3 samples, 0.08%)</title><rect x="6.9414%" y="245" width="0.0830%" height="15" fill="rgb(235,201,11)" fg:x="251" fg:w="3"/><text x="7.1914%" y="255.50"></text></g><g><title>bench`candle_core::storage::Storage::reduce_op (1 samples, 0.03%)</title><rect x="6.9967%" y="229" width="0.0277%" height="15" fill="rgb(207,46,11)" fg:x="253" fg:w="1"/><text x="7.2467%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::contiguous (1 samples, 0.03%)</title><rect x="7.0243%" y="229" width="0.0277%" height="15" fill="rgb(241,35,35)" fg:x="254" fg:w="1"/><text x="7.2743%" y="239.50"></text></g><g><title>bench`candle_core::tensor::from_storage (1 samples, 0.03%)</title><rect x="7.0243%" y="213" width="0.0277%" height="15" fill="rgb(243,32,47)" fg:x="254" fg:w="1"/><text x="7.2743%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1457 (1 samples, 0.03%)</title><rect x="7.0243%" y="197" width="0.0277%" height="15" fill="rgb(247,202,23)" fg:x="254" fg:w="1"/><text x="7.2743%" y="207.50"></text></g><g><title>bench`candle_transformers::models::bert::BertSelfAttention::transpose_for_scores (2 samples, 0.06%)</title><rect x="7.0243%" y="245" width="0.0553%" height="15" fill="rgb(219,102,11)" fg:x="254" fg:w="2"/><text x="7.2743%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::transpose (1 samples, 0.03%)</title><rect x="7.0520%" y="229" width="0.0277%" height="15" fill="rgb(243,110,44)" fg:x="255" fg:w="1"/><text x="7.3020%" y="239.50"></text></g><g><title>bench`alloc::slice::_&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="7.0520%" y="213" width="0.0277%" height="15" fill="rgb(222,74,54)" fg:x="255" fg:w="1"/><text x="7.3020%" y="223.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="7.0520%" y="197" width="0.0277%" height="15" fill="rgb(216,99,12)" fg:x="255" fg:w="1"/><text x="7.3020%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="7.0520%" y="181" width="0.0277%" height="15" fill="rgb(226,22,26)" fg:x="255" fg:w="1"/><text x="7.3020%" y="191.50"></text></g><g><title>bench`&lt;candle_transformers::models::bert::BertSelfAttention as candle_core::Module&gt;::forward (70 samples, 1.94%)</title><rect x="5.1715%" y="261" width="1.9358%" height="15" fill="rgb(217,163,10)" fg:x="187" fg:w="70"/><text x="5.4215%" y="271.50">b..</text></g><g><title>libsystem_m.dylib`expf (1 samples, 0.03%)</title><rect x="7.0796%" y="245" width="0.0277%" height="15" fill="rgb(213,25,53)" fg:x="256" fg:w="1"/><text x="7.3296%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1213 (1 samples, 0.03%)</title><rect x="7.3285%" y="229" width="0.0277%" height="15" fill="rgb(252,105,26)" fg:x="265" fg:w="1"/><text x="7.5785%" y="239.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (3 samples, 0.08%)</title><rect x="7.3562%" y="197" width="0.0830%" height="15" fill="rgb(220,39,43)" fg:x="266" fg:w="3"/><text x="7.6062%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_388 (2 samples, 0.06%)</title><rect x="7.4392%" y="197" width="0.0553%" height="15" fill="rgb(229,68,48)" fg:x="269" fg:w="2"/><text x="7.6892%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_add (8 samples, 0.22%)</title><rect x="7.3562%" y="229" width="0.2212%" height="15" fill="rgb(252,8,32)" fg:x="266" fg:w="8"/><text x="7.6062%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (8 samples, 0.22%)</title><rect x="7.3562%" y="213" width="0.2212%" height="15" fill="rgb(223,20,43)" fg:x="266" fg:w="8"/><text x="7.6062%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4010 (3 samples, 0.08%)</title><rect x="7.4945%" y="197" width="0.0830%" height="15" fill="rgb(229,81,49)" fg:x="271" fg:w="3"/><text x="7.7445%" y="207.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (5 samples, 0.14%)</title><rect x="7.5774%" y="197" width="0.1383%" height="15" fill="rgb(236,28,36)" fg:x="274" fg:w="5"/><text x="7.8274%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_div (6 samples, 0.17%)</title><rect x="7.5774%" y="229" width="0.1659%" height="15" fill="rgb(249,185,26)" fg:x="274" fg:w="6"/><text x="7.8274%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::div (6 samples, 0.17%)</title><rect x="7.5774%" y="213" width="0.1659%" height="15" fill="rgb(249,174,33)" fg:x="274" fg:w="6"/><text x="7.8274%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_389 (1 samples, 0.03%)</title><rect x="7.7157%" y="197" width="0.0277%" height="15" fill="rgb(233,201,37)" fg:x="279" fg:w="1"/><text x="7.9657%" y="207.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (2 samples, 0.06%)</title><rect x="7.7434%" y="197" width="0.0553%" height="15" fill="rgb(221,78,26)" fg:x="280" fg:w="2"/><text x="7.9934%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_178 (2 samples, 0.06%)</title><rect x="7.7987%" y="197" width="0.0553%" height="15" fill="rgb(250,127,30)" fg:x="282" fg:w="2"/><text x="8.0487%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_388 (3 samples, 0.08%)</title><rect x="7.8540%" y="197" width="0.0830%" height="15" fill="rgb(230,49,44)" fg:x="284" fg:w="3"/><text x="8.1040%" y="207.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_sub (9 samples, 0.25%)</title><rect x="7.7434%" y="229" width="0.2489%" height="15" fill="rgb(229,67,23)" fg:x="280" fg:w="9"/><text x="7.9934%" y="239.50"></text></g><g><title>bench`candle_core::tensor::Tensor::sub (9 samples, 0.25%)</title><rect x="7.7434%" y="213" width="0.2489%" height="15" fill="rgb(249,83,47)" fg:x="280" fg:w="9"/><text x="7.9934%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4010 (2 samples, 0.06%)</title><rect x="7.9369%" y="197" width="0.0553%" height="15" fill="rgb(215,43,3)" fg:x="287" fg:w="2"/><text x="8.1869%" y="207.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (8 samples, 0.22%)</title><rect x="7.9923%" y="213" width="0.2212%" height="15" fill="rgb(238,154,13)" fg:x="289" fg:w="8"/><text x="8.2423%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_178 (3 samples, 0.08%)</title><rect x="8.2135%" y="213" width="0.0830%" height="15" fill="rgb(219,56,2)" fg:x="297" fg:w="3"/><text x="8.4635%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_388 (3 samples, 0.08%)</title><rect x="8.2965%" y="213" width="0.0830%" height="15" fill="rgb(233,0,4)" fg:x="300" fg:w="3"/><text x="8.5465%" y="223.50"></text></g><g><title>bench`candle_core::tensor::Tensor::mul (15 samples, 0.41%)</title><rect x="7.9923%" y="229" width="0.4148%" height="15" fill="rgb(235,30,7)" fg:x="289" fg:w="15"/><text x="8.2423%" y="239.50"></text></g><g><title>bench`candle_core::storage::Storage::same_device (1 samples, 0.03%)</title><rect x="8.3794%" y="213" width="0.0277%" height="15" fill="rgb(250,79,13)" fg:x="303" fg:w="1"/><text x="8.6294%" y="223.50"></text></g><g><title>bench`candle_core::device::Device::location (1 samples, 0.03%)</title><rect x="8.3794%" y="197" width="0.0277%" height="15" fill="rgb(211,146,34)" fg:x="303" fg:w="1"/><text x="8.6294%" y="207.50"></text></g><g><title>bench`alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="8.4071%" y="213" width="0.0277%" height="15" fill="rgb(228,22,38)" fg:x="304" fg:w="1"/><text x="8.6571%" y="223.50"></text></g><g><title>bench`&lt;candle_nn::layer_norm::LayerNorm as candle_core::Module&gt;::forward (52 samples, 1.44%)</title><rect x="7.1073%" y="245" width="1.4381%" height="15" fill="rgb(235,168,5)" fg:x="257" fg:w="52"/><text x="7.3573%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::sum_keepdim (5 samples, 0.14%)</title><rect x="8.4071%" y="229" width="0.1383%" height="15" fill="rgb(221,155,16)" fg:x="304" fg:w="5"/><text x="8.6571%" y="239.50"></text></g><g><title>bench`candle_core::storage::Storage::reduce_op (4 samples, 0.11%)</title><rect x="8.4347%" y="213" width="0.1106%" height="15" fill="rgb(215,215,53)" fg:x="305" fg:w="4"/><text x="8.6847%" y="223.50"></text></g><g><title>bench`candle_core::layout::Layout::contiguous_offsets (1 samples, 0.03%)</title><rect x="8.5177%" y="197" width="0.0277%" height="15" fill="rgb(223,4,10)" fg:x="308" fg:w="1"/><text x="8.7677%" y="207.50"></text></g><g><title>bench`candle_core::layout::Layout::is_contiguous (1 samples, 0.03%)</title><rect x="8.5177%" y="181" width="0.0277%" height="15" fill="rgb(234,103,6)" fg:x="308" fg:w="1"/><text x="8.7677%" y="191.50"></text></g><g><title>bench`&lt;candle_transformers::models::with_tracing::LayerNorm as candle_core::Module&gt;::forward (53 samples, 1.47%)</title><rect x="7.1073%" y="261" width="1.4657%" height="15" fill="rgb(227,97,0)" fg:x="257" fg:w="53"/><text x="7.3573%" y="271.50"></text></g><g><title>bench`OUTLINED_FUNCTION_6432 (1 samples, 0.03%)</title><rect x="8.5454%" y="245" width="0.0277%" height="15" fill="rgb(234,150,53)" fg:x="309" fg:w="1"/><text x="8.7954%" y="255.50"></text></g><g><title>bench`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="8.5730%" y="245" width="0.0277%" height="15" fill="rgb(228,201,54)" fg:x="310" fg:w="1"/><text x="8.8230%" y="255.50"></text></g><g><title>bench`alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="8.5730%" y="229" width="0.0277%" height="15" fill="rgb(222,22,37)" fg:x="310" fg:w="1"/><text x="8.8230%" y="239.50"></text></g><g><title>bench`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="8.5730%" y="213" width="0.0277%" height="15" fill="rgb(237,53,32)" fg:x="310" fg:w="1"/><text x="8.8230%" y="223.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (3 samples, 0.08%)</title><rect x="8.6007%" y="213" width="0.0830%" height="15" fill="rgb(233,25,53)" fg:x="311" fg:w="3"/><text x="8.8507%" y="223.50"></text></g><g><title>bench`candle_core::tensor::Tensor::broadcast_add (8 samples, 0.22%)</title><rect x="8.6007%" y="245" width="0.2212%" height="15" fill="rgb(210,40,34)" fg:x="311" fg:w="8"/><text x="8.8507%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (8 samples, 0.22%)</title><rect x="8.6007%" y="229" width="0.2212%" height="15" fill="rgb(241,220,44)" fg:x="311" fg:w="8"/><text x="8.8507%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_178 (5 samples, 0.14%)</title><rect x="8.6836%" y="213" width="0.1383%" height="15" fill="rgb(235,28,35)" fg:x="314" fg:w="5"/><text x="8.9336%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="8.8219%" y="165" width="0.0277%" height="15" fill="rgb(210,56,17)" fg:x="319" fg:w="1"/><text x="9.0719%" y="175.50"></text></g><g><title>bench`alloc::vec::from_elem (2 samples, 0.06%)</title><rect x="8.8219%" y="229" width="0.0553%" height="15" fill="rgb(224,130,29)" fg:x="319" fg:w="2"/><text x="9.0719%" y="239.50"></text></g><g><title>bench`alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.06%)</title><rect x="8.8219%" y="213" width="0.0553%" height="15" fill="rgb(235,212,8)" fg:x="319" fg:w="2"/><text x="9.0719%" y="223.50"></text></g><g><title>bench`alloc::alloc::Global::alloc_impl (2 samples, 0.06%)</title><rect x="8.8219%" y="197" width="0.0553%" height="15" fill="rgb(223,33,50)" fg:x="319" fg:w="2"/><text x="9.0719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="8.8219%" y="181" width="0.0553%" height="15" fill="rgb(219,149,13)" fg:x="319" fg:w="2"/><text x="9.0719%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="8.8496%" y="165" width="0.0277%" height="15" fill="rgb(250,156,29)" fg:x="320" fg:w="1"/><text x="9.0996%" y="175.50"></text></g><g><title>bench`candle_core::layout::Layout::contiguous_with_offset (1 samples, 0.03%)</title><rect x="8.8772%" y="213" width="0.0277%" height="15" fill="rgb(216,193,19)" fg:x="321" fg:w="1"/><text x="9.1272%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_2956 (1 samples, 0.03%)</title><rect x="8.8772%" y="197" width="0.0277%" height="15" fill="rgb(216,135,14)" fg:x="321" fg:w="1"/><text x="9.1272%" y="207.50"></text></g><g><title>bench`candle_core::tensor::from_storage (2 samples, 0.06%)</title><rect x="8.8772%" y="229" width="0.0553%" height="15" fill="rgb(241,47,5)" fg:x="321" fg:w="2"/><text x="9.1272%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="8.9049%" y="213" width="0.0277%" height="15" fill="rgb(233,42,35)" fg:x="322" fg:w="1"/><text x="9.1549%" y="223.50"></text></g><g><title>bench`candle_core::utils::get_num_threads (2 samples, 0.06%)</title><rect x="8.9325%" y="229" width="0.0553%" height="15" fill="rgb(231,13,6)" fg:x="323" fg:w="2"/><text x="9.1825%" y="239.50"></text></g><g><title>libsystem_c.dylib`sysconf (2 samples, 0.06%)</title><rect x="8.9325%" y="213" width="0.0553%" height="15" fill="rgb(207,181,40)" fg:x="323" fg:w="2"/><text x="9.1825%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sysctl (2 samples, 0.06%)</title><rect x="8.9325%" y="197" width="0.0553%" height="15" fill="rgb(254,173,49)" fg:x="323" fg:w="2"/><text x="9.1825%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (8 samples, 0.22%)</title><rect x="8.9878%" y="149" width="0.2212%" height="15" fill="rgb(221,1,38)" fg:x="325" fg:w="8"/><text x="9.2378%" y="159.50"></text></g><g><title>bench`rayon_core::latch::LockLatch::wait_and_reset (9 samples, 0.25%)</title><rect x="8.9878%" y="181" width="0.2489%" height="15" fill="rgb(206,124,46)" fg:x="325" fg:w="9"/><text x="9.2378%" y="191.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (9 samples, 0.25%)</title><rect x="8.9878%" y="165" width="0.2489%" height="15" fill="rgb(249,21,11)" fg:x="325" fg:w="9"/><text x="9.2378%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.03%)</title><rect x="9.2091%" y="149" width="0.0277%" height="15" fill="rgb(222,201,40)" fg:x="333" fg:w="1"/><text x="9.4591%" y="159.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.03%)</title><rect x="9.2367%" y="181" width="0.0277%" height="15" fill="rgb(235,61,29)" fg:x="334" fg:w="1"/><text x="9.4867%" y="191.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (1 samples, 0.03%)</title><rect x="9.2367%" y="165" width="0.0277%" height="15" fill="rgb(219,207,3)" fg:x="334" fg:w="1"/><text x="9.4867%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="9.2367%" y="149" width="0.0277%" height="15" fill="rgb(222,56,46)" fg:x="334" fg:w="1"/><text x="9.4867%" y="159.50"></text></g><g><title>bench`gemm_f32::gemm::f32::neon::gemm_basic (11 samples, 0.30%)</title><rect x="8.9878%" y="229" width="0.3042%" height="15" fill="rgb(239,76,54)" fg:x="325" fg:w="11"/><text x="9.2378%" y="239.50"></text></g><g><title>bench`gemm_common::gemm::par_for_each::inner (11 samples, 0.30%)</title><rect x="8.9878%" y="213" width="0.3042%" height="15" fill="rgb(231,124,27)" fg:x="325" fg:w="11"/><text x="9.2378%" y="223.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (11 samples, 0.30%)</title><rect x="8.9878%" y="197" width="0.3042%" height="15" fill="rgb(249,195,6)" fg:x="325" fg:w="11"/><text x="9.2378%" y="207.50"></text></g><g><title>bench`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="9.2644%" y="181" width="0.0277%" height="15" fill="rgb(237,174,47)" fg:x="335" fg:w="1"/><text x="9.5144%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="9.2644%" y="165" width="0.0277%" height="15" fill="rgb(206,201,31)" fg:x="335" fg:w="1"/><text x="9.5144%" y="175.50"></text></g><g><title>bench`&lt;candle_transformers::models::with_tracing::Linear as candle_core::Module&gt;::forward (27 samples, 0.75%)</title><rect x="8.5730%" y="261" width="0.7467%" height="15" fill="rgb(231,57,52)" fg:x="310" fg:w="27"/><text x="8.8230%" y="271.50"></text></g><g><title>bench`candle_core::tensor::Tensor::matmul (18 samples, 0.50%)</title><rect x="8.8219%" y="245" width="0.4978%" height="15" fill="rgb(248,177,22)" fg:x="319" fg:w="18"/><text x="9.0719%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="9.2920%" y="229" width="0.0277%" height="15" fill="rgb(215,211,37)" fg:x="336" fg:w="1"/><text x="9.5420%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1731 (1 samples, 0.03%)</title><rect x="9.3197%" y="261" width="0.0277%" height="15" fill="rgb(241,128,51)" fg:x="337" fg:w="1"/><text x="9.5697%" y="271.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.3473%" y="261" width="0.0277%" height="15" fill="rgb(227,165,31)" fg:x="338" fg:w="1"/><text x="9.5973%" y="271.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (1 samples, 0.03%)</title><rect x="9.3473%" y="245" width="0.0277%" height="15" fill="rgb(228,167,24)" fg:x="338" fg:w="1"/><text x="9.5973%" y="255.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.3473%" y="229" width="0.0277%" height="15" fill="rgb(228,143,12)" fg:x="338" fg:w="1"/><text x="9.5973%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="9.3473%" y="213" width="0.0277%" height="15" fill="rgb(249,149,8)" fg:x="338" fg:w="1"/><text x="9.5973%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="9.3473%" y="197" width="0.0277%" height="15" fill="rgb(243,35,44)" fg:x="338" fg:w="1"/><text x="9.5973%" y="207.50"></text></g><g><title>bench`&lt;candle_core::cpu_backend::CpuStorage as candle_core::backend::BackendStorage&gt;::binary_impl (1 samples, 0.03%)</title><rect x="9.3750%" y="245" width="0.0277%" height="15" fill="rgb(246,89,9)" fg:x="339" fg:w="1"/><text x="9.6250%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::add (2 samples, 0.06%)</title><rect x="9.3750%" y="261" width="0.0553%" height="15" fill="rgb(233,213,13)" fg:x="339" fg:w="2"/><text x="9.6250%" y="271.50"></text></g><g><title>bench`OUTLINED_FUNCTION_598 (1 samples, 0.03%)</title><rect x="9.4027%" y="245" width="0.0277%" height="15" fill="rgb(233,141,41)" fg:x="340" fg:w="1"/><text x="9.6527%" y="255.50"></text></g><g><title>bench`candle_core::tensor::Tensor::sum_impl (3 samples, 0.08%)</title><rect x="9.4303%" y="261" width="0.0830%" height="15" fill="rgb(239,167,4)" fg:x="341" fg:w="3"/><text x="9.6803%" y="271.50"></text></g><g><title>bench`candle_core::storage::Storage::reduce_op (3 samples, 0.08%)</title><rect x="9.4303%" y="245" width="0.0830%" height="15" fill="rgb(209,217,16)" fg:x="341" fg:w="3"/><text x="9.6803%" y="255.50"></text></g><g><title>bench`core::ops::function::FnMut::call_mut (3 samples, 0.08%)</title><rect x="9.5133%" y="261" width="0.0830%" height="15" fill="rgb(219,88,35)" fg:x="344" fg:w="3"/><text x="9.7633%" y="271.50"></text></g><g><title>bench`&lt;tokenizers::models::ModelWrapper as tokenizers::tokenizer::Model&gt;::tokenize (2 samples, 0.06%)</title><rect x="9.6239%" y="229" width="0.0553%" height="15" fill="rgb(220,193,23)" fg:x="348" fg:w="2"/><text x="9.8739%" y="239.50"></text></g><g><title>bench`hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.06%)</title><rect x="9.6239%" y="213" width="0.0553%" height="15" fill="rgb(230,90,52)" fg:x="348" fg:w="2"/><text x="9.8739%" y="223.50"></text></g><g><title>bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence (4 samples, 0.11%)</title><rect x="9.5962%" y="261" width="0.1106%" height="15" fill="rgb(252,106,19)" fg:x="347" fg:w="4"/><text x="9.8462%" y="271.50"></text></g><g><title>bench`tokenizers::tokenizer::TokenizerImpl&lt;M,N,PT,PP,D&gt;::encode_single_sequence::_{{closure}} (4 samples, 0.11%)</title><rect x="9.5962%" y="245" width="0.1106%" height="15" fill="rgb(206,74,20)" fg:x="347" fg:w="4"/><text x="9.8462%" y="255.50"></text></g><g><title>bench`unicode_categories::table_binary_search (1 samples, 0.03%)</title><rect x="9.6792%" y="229" width="0.0277%" height="15" fill="rgb(230,138,44)" fg:x="350" fg:w="1"/><text x="9.9292%" y="239.50"></text></g><g><title>bench`bench::lib::Model::predict (281 samples, 7.77%)</title><rect x="1.9635%" y="277" width="7.7710%" height="15" fill="rgb(235,182,43)" fg:x="71" fg:w="281"/><text x="2.2135%" y="287.50">bench`bench..</text></g><g><title>bench`tokenizers::tokenizer::encoding::Encoding::set_sequence_id (1 samples, 0.03%)</title><rect x="9.7069%" y="261" width="0.0277%" height="15" fill="rgb(242,16,51)" fg:x="351" fg:w="1"/><text x="9.9569%" y="271.50"></text></g><g><title>bench`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="9.7069%" y="245" width="0.0277%" height="15" fill="rgb(248,9,4)" fg:x="351" fg:w="1"/><text x="9.9569%" y="255.50"></text></g><g><title>bench`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="9.7069%" y="229" width="0.0277%" height="15" fill="rgb(210,31,22)" fg:x="351" fg:w="1"/><text x="9.9569%" y="239.50"></text></g><g><title>bench`hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.03%)</title><rect x="9.7069%" y="213" width="0.0277%" height="15" fill="rgb(239,54,39)" fg:x="351" fg:w="1"/><text x="9.9569%" y="223.50"></text></g><g><title>bench`hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.03%)</title><rect x="9.7069%" y="197" width="0.0277%" height="15" fill="rgb(230,99,41)" fg:x="351" fg:w="1"/><text x="9.9569%" y="207.50"></text></g><g><title>bench`hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.03%)</title><rect x="9.7069%" y="181" width="0.0277%" height="15" fill="rgb(253,106,12)" fg:x="351" fg:w="1"/><text x="9.9569%" y="191.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.14%)</title><rect x="9.7345%" y="261" width="0.1383%" height="15" fill="rgb(213,46,41)" fg:x="352" fg:w="5"/><text x="9.9845%" y="271.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (5 samples, 0.14%)</title><rect x="9.7345%" y="245" width="0.1383%" height="15" fill="rgb(215,133,35)" fg:x="352" fg:w="5"/><text x="9.9845%" y="255.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.14%)</title><rect x="9.7345%" y="229" width="0.1383%" height="15" fill="rgb(213,28,5)" fg:x="352" fg:w="5"/><text x="9.9845%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.14%)</title><rect x="9.7345%" y="213" width="0.1383%" height="15" fill="rgb(215,77,49)" fg:x="352" fg:w="5"/><text x="9.9845%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.14%)</title><rect x="9.7345%" y="197" width="0.1383%" height="15" fill="rgb(248,100,22)" fg:x="352" fg:w="5"/><text x="9.9845%" y="207.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::bert::BertAttention&gt; (1 samples, 0.03%)</title><rect x="9.8728%" y="213" width="0.0277%" height="15" fill="rgb(208,67,9)" fg:x="357" fg:w="1"/><text x="10.1228%" y="223.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::bert::BertOutput&gt; (1 samples, 0.03%)</title><rect x="9.8728%" y="197" width="0.0277%" height="15" fill="rgb(219,133,21)" fg:x="357" fg:w="1"/><text x="10.1228%" y="207.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::with_tracing::Linear&gt; (1 samples, 0.03%)</title><rect x="9.8728%" y="181" width="0.0277%" height="15" fill="rgb(246,46,29)" fg:x="357" fg:w="1"/><text x="10.1228%" y="191.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_nn::linear::Linear&gt; (1 samples, 0.03%)</title><rect x="9.8728%" y="165" width="0.0277%" height="15" fill="rgb(246,185,52)" fg:x="357" fg:w="1"/><text x="10.1228%" y="175.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.8728%" y="149" width="0.0277%" height="15" fill="rgb(252,136,11)" fg:x="357" fg:w="1"/><text x="10.1228%" y="159.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (1 samples, 0.03%)</title><rect x="9.8728%" y="133" width="0.0277%" height="15" fill="rgb(219,138,53)" fg:x="357" fg:w="1"/><text x="10.1228%" y="143.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.8728%" y="117" width="0.0277%" height="15" fill="rgb(211,51,23)" fg:x="357" fg:w="1"/><text x="10.1228%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="9.8728%" y="101" width="0.0277%" height="15" fill="rgb(247,221,28)" fg:x="357" fg:w="1"/><text x="10.1228%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="9.8728%" y="85" width="0.0277%" height="15" fill="rgb(251,222,45)" fg:x="357" fg:w="1"/><text x="10.1228%" y="95.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;bench::lib::Model&gt; (7 samples, 0.19%)</title><rect x="9.7345%" y="277" width="0.1936%" height="15" fill="rgb(217,162,53)" fg:x="352" fg:w="7"/><text x="9.9845%" y="287.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::bert::BertEncoder&gt; (2 samples, 0.06%)</title><rect x="9.8728%" y="261" width="0.0553%" height="15" fill="rgb(229,93,14)" fg:x="357" fg:w="2"/><text x="10.1228%" y="271.50"></text></g><g><title>bench`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="9.8728%" y="245" width="0.0553%" height="15" fill="rgb(209,67,49)" fg:x="357" fg:w="2"/><text x="10.1228%" y="255.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::bert::BertLayer&gt; (2 samples, 0.06%)</title><rect x="9.8728%" y="229" width="0.0553%" height="15" fill="rgb(213,87,29)" fg:x="357" fg:w="2"/><text x="10.1228%" y="239.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::bert::BertOutput&gt; (1 samples, 0.03%)</title><rect x="9.9004%" y="213" width="0.0277%" height="15" fill="rgb(205,151,52)" fg:x="358" fg:w="1"/><text x="10.1504%" y="223.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_transformers::models::with_tracing::Linear&gt; (1 samples, 0.03%)</title><rect x="9.9004%" y="197" width="0.0277%" height="15" fill="rgb(253,215,39)" fg:x="358" fg:w="1"/><text x="10.1504%" y="207.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_nn::linear::Linear&gt; (1 samples, 0.03%)</title><rect x="9.9004%" y="181" width="0.0277%" height="15" fill="rgb(221,220,41)" fg:x="358" fg:w="1"/><text x="10.1504%" y="191.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.9004%" y="165" width="0.0277%" height="15" fill="rgb(218,133,21)" fg:x="358" fg:w="1"/><text x="10.1504%" y="175.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;candle_core::tensor::Tensor_&gt; (1 samples, 0.03%)</title><rect x="9.9004%" y="149" width="0.0277%" height="15" fill="rgb(221,193,43)" fg:x="358" fg:w="1"/><text x="10.1504%" y="159.50"></text></g><g><title>bench`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="9.9004%" y="133" width="0.0277%" height="15" fill="rgb(240,128,52)" fg:x="358" fg:w="1"/><text x="10.1504%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.03%)</title><rect x="9.9004%" y="117" width="0.0277%" height="15" fill="rgb(253,114,12)" fg:x="358" fg:w="1"/><text x="10.1504%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="9.9004%" y="101" width="0.0277%" height="15" fill="rgb(215,223,47)" fg:x="358" fg:w="1"/><text x="10.1504%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="9.9281%" y="229" width="0.0553%" height="15" fill="rgb(248,225,23)" fg:x="359" fg:w="2"/><text x="10.1781%" y="239.50"></text></g><g><title>bench`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="9.9281%" y="245" width="0.0830%" height="15" fill="rgb(250,108,0)" fg:x="359" fg:w="3"/><text x="10.1781%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="9.9834%" y="229" width="0.0277%" height="15" fill="rgb(228,208,7)" fg:x="361" fg:w="1"/><text x="10.2334%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="9.9834%" y="213" width="0.0277%" height="15" fill="rgb(244,45,10)" fg:x="361" fg:w="1"/><text x="10.2334%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="9.9834%" y="197" width="0.0277%" height="15" fill="rgb(207,125,25)" fg:x="361" fg:w="1"/><text x="10.2334%" y="207.50"></text></g><g><title>bench`main (363 samples, 10.04%)</title><rect x="0.0000%" y="325" width="10.0387%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="363"/><text x="0.2500%" y="335.50">bench`main</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (363 samples, 10.04%)</title><rect x="0.0000%" y="309" width="10.0387%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="363"/><text x="0.2500%" y="319.50">bench`std::sys_..</text></g><g><title>bench`bench::main (363 samples, 10.04%)</title><rect x="0.0000%" y="293" width="10.0387%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="363"/><text x="0.2500%" y="303.50">bench`bench::ma..</text></g><g><title>bench`core::ptr::drop_in_place&lt;tokenizers::tokenizer::Tokenizer&gt; (4 samples, 0.11%)</title><rect x="9.9281%" y="277" width="0.1106%" height="15" fill="rgb(235,49,36)" fg:x="359" fg:w="4"/><text x="10.1781%" y="287.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;tokenizers::models::ModelWrapper&gt; (4 samples, 0.11%)</title><rect x="9.9281%" y="261" width="0.1106%" height="15" fill="rgb(225,32,20)" fg:x="359" fg:w="4"/><text x="10.1781%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="10.0111%" y="245" width="0.0277%" height="15" fill="rgb(215,141,46)" fg:x="362" fg:w="1"/><text x="10.2611%" y="255.50"></text></g><g><title>bench`std::sys::pal::unix::stack_overflow::imp::make_handler (1 samples, 0.03%)</title><rect x="10.0387%" y="325" width="0.0277%" height="15" fill="rgb(250,160,47)" fg:x="363" fg:w="1"/><text x="10.2887%" y="335.50"></text></g><g><title>dyld`start (365 samples, 10.09%)</title><rect x="0.0000%" y="341" width="10.0940%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="365"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.03%)</title><rect x="10.0664%" y="325" width="0.0277%" height="15" fill="rgb(234,217,39)" fg:x="364" fg:w="1"/><text x="10.3164%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.03%)</title><rect x="10.0664%" y="309" width="0.0277%" height="15" fill="rgb(207,178,40)" fg:x="364" fg:w="1"/><text x="10.3164%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.06%)</title><rect x="10.0940%" y="341" width="0.0553%" height="15" fill="rgb(221,136,13)" fg:x="365" fg:w="2"/><text x="10.3440%" y="351.50"></text></g><g><title>bench`OUTLINED_FUNCTION_394 (2 samples, 0.06%)</title><rect x="10.1493%" y="261" width="0.0553%" height="15" fill="rgb(249,199,10)" fg:x="367" fg:w="2"/><text x="10.3993%" y="271.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (2 samples, 0.06%)</title><rect x="10.2046%" y="261" width="0.0553%" height="15" fill="rgb(249,222,13)" fg:x="369" fg:w="2"/><text x="10.4546%" y="271.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::take_local_job (1 samples, 0.03%)</title><rect x="10.2600%" y="261" width="0.0277%" height="15" fill="rgb(244,185,38)" fg:x="371" fg:w="1"/><text x="10.5100%" y="271.50"></text></g><g><title>bench`OUTLINED_FUNCTION_142 (1 samples, 0.03%)</title><rect x="10.9513%" y="213" width="0.0277%" height="15" fill="rgb(236,202,9)" fg:x="396" fg:w="1"/><text x="11.2013%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4 (1 samples, 0.03%)</title><rect x="10.9790%" y="213" width="0.0277%" height="15" fill="rgb(250,229,37)" fg:x="397" fg:w="1"/><text x="11.2290%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_174 (1 samples, 0.03%)</title><rect x="11.0066%" y="197" width="0.0277%" height="15" fill="rgb(206,174,23)" fg:x="398" fg:w="1"/><text x="11.2566%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (8 samples, 0.22%)</title><rect x="11.0896%" y="181" width="0.2212%" height="15" fill="rgb(211,33,43)" fg:x="401" fg:w="8"/><text x="11.3396%" y="191.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (26 samples, 0.72%)</title><rect x="11.3108%" y="181" width="0.7190%" height="15" fill="rgb(245,58,50)" fg:x="409" fg:w="26"/><text x="11.5608%" y="191.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (538 samples, 14.88%)</title><rect x="12.0299%" y="181" width="14.8783%" height="15" fill="rgb(244,68,36)" fg:x="435" fg:w="538"/><text x="12.2799%" y="191.50">bench`gemm_common::pack..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (7 samples, 0.19%)</title><rect x="26.9082%" y="181" width="0.1936%" height="15" fill="rgb(232,229,15)" fg:x="973" fg:w="7"/><text x="27.1582%" y="191.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x3 (11 samples, 0.30%)</title><rect x="27.1018%" y="181" width="0.3042%" height="15" fill="rgb(254,30,23)" fg:x="980" fg:w="11"/><text x="27.3518%" y="191.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (46 samples, 1.27%)</title><rect x="27.4060%" y="181" width="1.2721%" height="15" fill="rgb(235,160,14)" fg:x="991" fg:w="46"/><text x="27.6560%" y="191.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (640 samples, 17.70%)</title><rect x="11.0343%" y="197" width="17.6991%" height="15" fill="rgb(212,155,44)" fg:x="399" fg:w="640"/><text x="11.2843%" y="207.50">bench`gemm_common::gemm::ge..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="28.6781%" y="181" width="0.0553%" height="15" fill="rgb(226,2,50)" fg:x="1037" fg:w="2"/><text x="28.9281%" y="191.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (649 samples, 17.95%)</title><rect x="11.0066%" y="213" width="17.9480%" height="15" fill="rgb(234,177,6)" fg:x="398" fg:w="649"/><text x="11.2566%" y="223.50">bench`gemm_common::gemm::gem..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (8 samples, 0.22%)</title><rect x="28.7334%" y="197" width="0.2212%" height="15" fill="rgb(217,24,9)" fg:x="1039" fg:w="8"/><text x="28.9834%" y="207.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_rhs (5 samples, 0.14%)</title><rect x="28.9546%" y="213" width="0.1383%" height="15" fill="rgb(220,13,46)" fg:x="1047" fg:w="5"/><text x="29.2046%" y="223.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1207 (1 samples, 0.03%)</title><rect x="29.1482%" y="197" width="0.0277%" height="15" fill="rgb(239,221,27)" fg:x="1054" fg:w="1"/><text x="29.3982%" y="207.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="29.1759%" y="197" width="0.0277%" height="15" fill="rgb(222,198,25)" fg:x="1055" fg:w="1"/><text x="29.4259%" y="207.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (4 samples, 0.11%)</title><rect x="29.2312%" y="149" width="0.1106%" height="15" fill="rgb(211,99,13)" fg:x="1057" fg:w="4"/><text x="29.4812%" y="159.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (25 samples, 0.69%)</title><rect x="29.3418%" y="149" width="0.6914%" height="15" fill="rgb(232,111,31)" fg:x="1061" fg:w="25"/><text x="29.5918%" y="159.50"></text></g><g><title>bench`alloc::vec::from_elem (1 samples, 0.03%)</title><rect x="30.0332%" y="149" width="0.0277%" height="15" fill="rgb(245,82,37)" fg:x="1086" fg:w="1"/><text x="30.2832%" y="159.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (329 samples, 9.10%)</title><rect x="30.0608%" y="149" width="9.0985%" height="15" fill="rgb(227,149,46)" fg:x="1087" fg:w="329"/><text x="30.3108%" y="159.50">bench`gemm_co..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (6 samples, 0.17%)</title><rect x="39.1593%" y="149" width="0.1659%" height="15" fill="rgb(218,36,50)" fg:x="1416" fg:w="6"/><text x="39.4093%" y="159.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x3 (3 samples, 0.08%)</title><rect x="39.3252%" y="149" width="0.0830%" height="15" fill="rgb(226,80,48)" fg:x="1422" fg:w="3"/><text x="39.5752%" y="159.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (400 samples, 11.06%)</title><rect x="29.2035%" y="165" width="11.0619%" height="15" fill="rgb(238,224,15)" fg:x="1056" fg:w="400"/><text x="29.4535%" y="175.50">bench`gemm_commo..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (31 samples, 0.86%)</title><rect x="39.4082%" y="149" width="0.8573%" height="15" fill="rgb(241,136,10)" fg:x="1425" fg:w="31"/><text x="39.6582%" y="159.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (5 samples, 0.14%)</title><rect x="40.2655%" y="165" width="0.1383%" height="15" fill="rgb(208,32,45)" fg:x="1456" fg:w="5"/><text x="40.5155%" y="175.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (406 samples, 11.23%)</title><rect x="29.2035%" y="181" width="11.2279%" height="15" fill="rgb(207,135,9)" fg:x="1056" fg:w="406"/><text x="29.4535%" y="191.50">bench`gemm_common..</text></g><g><title>bench`std::sys::thread_local::fast_local::Key&lt;T&gt;::try_initialize (1 samples, 0.03%)</title><rect x="40.4038%" y="165" width="0.0277%" height="15" fill="rgb(206,86,44)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="175.50"></text></g><g><title>bench`__rust_alloc (1 samples, 0.03%)</title><rect x="40.4038%" y="149" width="0.0277%" height="15" fill="rgb(245,177,15)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (1 samples, 0.03%)</title><rect x="40.4038%" y="133" width="0.0277%" height="15" fill="rgb(206,64,50)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.03%)</title><rect x="40.4038%" y="117" width="0.0277%" height="15" fill="rgb(234,36,40)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="40.4038%" y="101" width="0.0277%" height="15" fill="rgb(213,64,8)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="40.4038%" y="85" width="0.0277%" height="15" fill="rgb(210,75,36)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.03%)</title><rect x="40.4038%" y="69" width="0.0277%" height="15" fill="rgb(229,88,21)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.03%)</title><rect x="40.4038%" y="53" width="0.0277%" height="15" fill="rgb(252,204,47)" fg:x="1461" fg:w="1"/><text x="40.6538%" y="63.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_rhs (6 samples, 0.17%)</title><rect x="40.4314%" y="181" width="0.1659%" height="15" fill="rgb(208,77,27)" fg:x="1462" fg:w="6"/><text x="40.6814%" y="191.50"></text></g><g><title>bench`OUTLINED_FUNCTION_2505 (1 samples, 0.03%)</title><rect x="40.5973%" y="149" width="0.0277%" height="15" fill="rgb(221,76,26)" fg:x="1468" fg:w="1"/><text x="40.8473%" y="159.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (7 samples, 0.19%)</title><rect x="40.6250%" y="117" width="0.1936%" height="15" fill="rgb(225,139,18)" fg:x="1469" fg:w="7"/><text x="40.8750%" y="127.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1583 (1 samples, 0.03%)</title><rect x="40.8186%" y="117" width="0.0277%" height="15" fill="rgb(230,137,11)" fg:x="1476" fg:w="1"/><text x="41.0686%" y="127.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (9 samples, 0.25%)</title><rect x="40.8462%" y="117" width="0.2489%" height="15" fill="rgb(212,28,1)" fg:x="1477" fg:w="9"/><text x="41.0962%" y="127.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (177 samples, 4.89%)</title><rect x="41.0951%" y="117" width="4.8949%" height="15" fill="rgb(248,164,17)" fg:x="1486" fg:w="177"/><text x="41.3451%" y="127.50">bench`..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (4 samples, 0.11%)</title><rect x="45.9900%" y="117" width="0.1106%" height="15" fill="rgb(222,171,42)" fg:x="1663" fg:w="4"/><text x="46.2400%" y="127.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x3 (9 samples, 0.25%)</title><rect x="46.1007%" y="117" width="0.2489%" height="15" fill="rgb(243,84,45)" fg:x="1667" fg:w="9"/><text x="46.3507%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (222 samples, 6.14%)</title><rect x="40.6250%" y="133" width="6.1394%" height="15" fill="rgb(252,49,23)" fg:x="1469" fg:w="222"/><text x="40.8750%" y="143.50">bench`ge..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (15 samples, 0.41%)</title><rect x="46.3496%" y="117" width="0.4148%" height="15" fill="rgb(215,19,7)" fg:x="1676" fg:w="15"/><text x="46.5996%" y="127.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (1 samples, 0.03%)</title><rect x="46.7644%" y="133" width="0.0277%" height="15" fill="rgb(238,81,41)" fg:x="1691" fg:w="1"/><text x="47.0144%" y="143.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (225 samples, 6.22%)</title><rect x="40.5973%" y="165" width="6.2223%" height="15" fill="rgb(210,199,37)" fg:x="1468" fg:w="225"/><text x="40.8473%" y="175.50">bench`ra..</text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (224 samples, 6.19%)</title><rect x="40.6250%" y="149" width="6.1947%" height="15" fill="rgb(244,192,49)" fg:x="1469" fg:w="224"/><text x="40.8750%" y="159.50">bench`ge..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (1 samples, 0.03%)</title><rect x="46.7920%" y="133" width="0.0277%" height="15" fill="rgb(226,211,11)" fg:x="1692" fg:w="1"/><text x="47.0420%" y="143.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (1 samples, 0.03%)</title><rect x="46.8473%" y="85" width="0.0277%" height="15" fill="rgb(236,162,54)" fg:x="1694" fg:w="1"/><text x="47.0973%" y="95.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (10 samples, 0.28%)</title><rect x="46.8750%" y="85" width="0.2765%" height="15" fill="rgb(220,229,9)" fg:x="1695" fg:w="10"/><text x="47.1250%" y="95.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (1 samples, 0.03%)</title><rect x="47.1515%" y="85" width="0.0277%" height="15" fill="rgb(250,87,22)" fg:x="1705" fg:w="1"/><text x="47.4015%" y="95.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (13 samples, 0.36%)</title><rect x="46.8473%" y="117" width="0.3595%" height="15" fill="rgb(239,43,17)" fg:x="1694" fg:w="13"/><text x="47.0973%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (13 samples, 0.36%)</title><rect x="46.8473%" y="101" width="0.3595%" height="15" fill="rgb(231,177,25)" fg:x="1694" fg:w="13"/><text x="47.0973%" y="111.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (1 samples, 0.03%)</title><rect x="47.1792%" y="85" width="0.0277%" height="15" fill="rgb(219,179,1)" fg:x="1706" fg:w="1"/><text x="47.4292%" y="95.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (2 samples, 0.06%)</title><rect x="47.2069%" y="69" width="0.0553%" height="15" fill="rgb(238,219,53)" fg:x="1707" fg:w="2"/><text x="47.4569%" y="79.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (2 samples, 0.06%)</title><rect x="47.2069%" y="53" width="0.0553%" height="15" fill="rgb(232,167,36)" fg:x="1707" fg:w="2"/><text x="47.4569%" y="63.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (16 samples, 0.44%)</title><rect x="46.8473%" y="149" width="0.4425%" height="15" fill="rgb(244,19,51)" fg:x="1694" fg:w="16"/><text x="47.0973%" y="159.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (16 samples, 0.44%)</title><rect x="46.8473%" y="133" width="0.4425%" height="15" fill="rgb(224,6,22)" fg:x="1694" fg:w="16"/><text x="47.0973%" y="143.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (3 samples, 0.08%)</title><rect x="47.2069%" y="117" width="0.0830%" height="15" fill="rgb(224,145,5)" fg:x="1707" fg:w="3"/><text x="47.4569%" y="127.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.08%)</title><rect x="47.2069%" y="101" width="0.0830%" height="15" fill="rgb(234,130,49)" fg:x="1707" fg:w="3"/><text x="47.4569%" y="111.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (3 samples, 0.08%)</title><rect x="47.2069%" y="85" width="0.0830%" height="15" fill="rgb(254,6,2)" fg:x="1707" fg:w="3"/><text x="47.4569%" y="95.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (1 samples, 0.03%)</title><rect x="47.2622%" y="69" width="0.0277%" height="15" fill="rgb(208,96,46)" fg:x="1709" fg:w="1"/><text x="47.5122%" y="79.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="47.2898%" y="149" width="0.0277%" height="15" fill="rgb(239,3,39)" fg:x="1710" fg:w="1"/><text x="47.5398%" y="159.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (1 samples, 0.03%)</title><rect x="47.2898%" y="133" width="0.0277%" height="15" fill="rgb(233,210,1)" fg:x="1710" fg:w="1"/><text x="47.5398%" y="143.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::take_local_job (1 samples, 0.03%)</title><rect x="47.3175%" y="149" width="0.0277%" height="15" fill="rgb(244,137,37)" fg:x="1711" fg:w="1"/><text x="47.5675%" y="159.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.03%)</title><rect x="47.3175%" y="133" width="0.0277%" height="15" fill="rgb(240,136,2)" fg:x="1711" fg:w="1"/><text x="47.5675%" y="143.50"></text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (1 samples, 0.03%)</title><rect x="47.3175%" y="117" width="0.0277%" height="15" fill="rgb(239,18,37)" fg:x="1711" fg:w="1"/><text x="47.5675%" y="127.50"></text></g><g><title>bench`crossbeam_epoch::internal::Global::collect (1 samples, 0.03%)</title><rect x="47.3175%" y="101" width="0.0277%" height="15" fill="rgb(218,185,22)" fg:x="1711" fg:w="1"/><text x="47.5675%" y="111.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (2 samples, 0.06%)</title><rect x="47.3451%" y="149" width="0.0553%" height="15" fill="rgb(225,218,4)" fg:x="1712" fg:w="2"/><text x="47.5951%" y="159.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (2 samples, 0.06%)</title><rect x="47.3451%" y="133" width="0.0553%" height="15" fill="rgb(230,182,32)" fg:x="1712" fg:w="2"/><text x="47.5951%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.06%)</title><rect x="47.3451%" y="117" width="0.0553%" height="15" fill="rgb(242,56,43)" fg:x="1712" fg:w="2"/><text x="47.5951%" y="127.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (2 samples, 0.06%)</title><rect x="47.4004%" y="149" width="0.0553%" height="15" fill="rgb(233,99,24)" fg:x="1714" fg:w="2"/><text x="47.6504%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.06%)</title><rect x="47.4004%" y="133" width="0.0553%" height="15" fill="rgb(234,209,42)" fg:x="1714" fg:w="2"/><text x="47.6504%" y="143.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (54 samples, 1.49%)</title><rect x="46.8197%" y="165" width="1.4934%" height="15" fill="rgb(227,7,12)" fg:x="1693" fg:w="54"/><text x="47.0697%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (31 samples, 0.86%)</title><rect x="47.4558%" y="149" width="0.8573%" height="15" fill="rgb(245,203,43)" fg:x="1716" fg:w="31"/><text x="47.7058%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.06%)</title><rect x="48.3131%" y="133" width="0.0553%" height="15" fill="rgb(238,205,33)" fg:x="1747" fg:w="2"/><text x="48.5631%" y="143.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (282 samples, 7.80%)</title><rect x="40.5973%" y="181" width="7.7987%" height="15" fill="rgb(231,56,7)" fg:x="1468" fg:w="282"/><text x="40.8473%" y="191.50">bench`rayon..</text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (3 samples, 0.08%)</title><rect x="48.3131%" y="165" width="0.0830%" height="15" fill="rgb(244,186,29)" fg:x="1747" fg:w="3"/><text x="48.5631%" y="175.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (3 samples, 0.08%)</title><rect x="48.3131%" y="149" width="0.0830%" height="15" fill="rgb(234,111,31)" fg:x="1747" fg:w="3"/><text x="48.5631%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="48.3684%" y="133" width="0.0277%" height="15" fill="rgb(241,149,10)" fg:x="1749" fg:w="1"/><text x="48.6184%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="48.3684%" y="117" width="0.0277%" height="15" fill="rgb(249,206,44)" fg:x="1749" fg:w="1"/><text x="48.6184%" y="127.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (695 samples, 19.22%)</title><rect x="29.2035%" y="197" width="19.2201%" height="15" fill="rgb(251,153,30)" fg:x="1056" fg:w="695"/><text x="29.4535%" y="207.50">bench`rayon::iter::plumbing::b..</text></g><g><title>bench`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="48.3960%" y="181" width="0.0277%" height="15" fill="rgb(239,152,38)" fg:x="1750" fg:w="1"/><text x="48.6460%" y="191.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (1 samples, 0.03%)</title><rect x="48.4237%" y="117" width="0.0277%" height="15" fill="rgb(249,139,47)" fg:x="1751" fg:w="1"/><text x="48.6737%" y="127.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (23 samples, 0.64%)</title><rect x="48.4513%" y="117" width="0.6361%" height="15" fill="rgb(244,64,35)" fg:x="1752" fg:w="23"/><text x="48.7013%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (25 samples, 0.69%)</title><rect x="48.4237%" y="133" width="0.6914%" height="15" fill="rgb(216,46,15)" fg:x="1751" fg:w="25"/><text x="48.6737%" y="143.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (1 samples, 0.03%)</title><rect x="49.0874%" y="117" width="0.0277%" height="15" fill="rgb(250,74,19)" fg:x="1775" fg:w="1"/><text x="49.3374%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (26 samples, 0.72%)</title><rect x="48.4237%" y="149" width="0.7190%" height="15" fill="rgb(249,42,33)" fg:x="1751" fg:w="26"/><text x="48.6737%" y="159.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (1 samples, 0.03%)</title><rect x="49.1150%" y="133" width="0.0277%" height="15" fill="rgb(242,149,17)" fg:x="1776" fg:w="1"/><text x="49.3650%" y="143.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (1 samples, 0.03%)</title><rect x="49.1427%" y="85" width="0.0277%" height="15" fill="rgb(244,29,21)" fg:x="1777" fg:w="1"/><text x="49.3927%" y="95.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (4 samples, 0.11%)</title><rect x="49.1427%" y="133" width="0.1106%" height="15" fill="rgb(220,130,37)" fg:x="1777" fg:w="4"/><text x="49.3927%" y="143.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (4 samples, 0.11%)</title><rect x="49.1427%" y="117" width="0.1106%" height="15" fill="rgb(211,67,2)" fg:x="1777" fg:w="4"/><text x="49.3927%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (4 samples, 0.11%)</title><rect x="49.1427%" y="101" width="0.1106%" height="15" fill="rgb(235,68,52)" fg:x="1777" fg:w="4"/><text x="49.3927%" y="111.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (3 samples, 0.08%)</title><rect x="49.1704%" y="85" width="0.0830%" height="15" fill="rgb(246,142,3)" fg:x="1778" fg:w="3"/><text x="49.4204%" y="95.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (31 samples, 0.86%)</title><rect x="48.4237%" y="181" width="0.8573%" height="15" fill="rgb(241,25,7)" fg:x="1751" fg:w="31"/><text x="48.6737%" y="191.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (31 samples, 0.86%)</title><rect x="48.4237%" y="165" width="0.8573%" height="15" fill="rgb(242,119,39)" fg:x="1751" fg:w="31"/><text x="48.6737%" y="175.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (5 samples, 0.14%)</title><rect x="49.1427%" y="149" width="0.1383%" height="15" fill="rgb(241,98,45)" fg:x="1777" fg:w="5"/><text x="49.3927%" y="159.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.03%)</title><rect x="49.2533%" y="133" width="0.0277%" height="15" fill="rgb(254,28,30)" fg:x="1781" fg:w="1"/><text x="49.5033%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.03%)</title><rect x="49.2533%" y="117" width="0.0277%" height="15" fill="rgb(241,142,54)" fg:x="1781" fg:w="1"/><text x="49.5033%" y="127.50"></text></g><g><title>bench`OUTLINED_FUNCTION_3666 (1 samples, 0.03%)</title><rect x="49.2810%" y="181" width="0.0277%" height="15" fill="rgb(222,85,15)" fg:x="1782" fg:w="1"/><text x="49.5310%" y="191.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (1 samples, 0.03%)</title><rect x="49.3086%" y="149" width="0.0277%" height="15" fill="rgb(210,85,47)" fg:x="1783" fg:w="1"/><text x="49.5586%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="49.3086%" y="133" width="0.0277%" height="15" fill="rgb(224,206,25)" fg:x="1783" fg:w="1"/><text x="49.5586%" y="143.50"></text></g><g><title>bench`crossbeam_epoch::internal::Global::collect (1 samples, 0.03%)</title><rect x="49.3363%" y="149" width="0.0277%" height="15" fill="rgb(243,201,19)" fg:x="1784" fg:w="1"/><text x="49.5863%" y="159.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.08%)</title><rect x="49.3086%" y="165" width="0.0830%" height="15" fill="rgb(236,59,4)" fg:x="1783" fg:w="3"/><text x="49.5586%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="49.3639%" y="149" width="0.0277%" height="15" fill="rgb(254,179,45)" fg:x="1785" fg:w="1"/><text x="49.6139%" y="159.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (4 samples, 0.11%)</title><rect x="49.3086%" y="181" width="0.1106%" height="15" fill="rgb(226,14,10)" fg:x="1783" fg:w="4"/><text x="49.5586%" y="191.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (1 samples, 0.03%)</title><rect x="49.3916%" y="165" width="0.0277%" height="15" fill="rgb(244,27,41)" fg:x="1786" fg:w="1"/><text x="49.6416%" y="175.50"></text></g><g><title>bench`std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="49.4192%" y="149" width="0.0277%" height="15" fill="rgb(235,35,32)" fg:x="1787" fg:w="1"/><text x="49.6692%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="49.4192%" y="133" width="0.0277%" height="15" fill="rgb(218,68,31)" fg:x="1787" fg:w="1"/><text x="49.6692%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.03%)</title><rect x="49.4192%" y="117" width="0.0277%" height="15" fill="rgb(207,120,37)" fg:x="1787" fg:w="1"/><text x="49.6692%" y="127.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (5 samples, 0.14%)</title><rect x="49.4192%" y="181" width="0.1383%" height="15" fill="rgb(227,98,0)" fg:x="1787" fg:w="5"/><text x="49.6692%" y="191.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (5 samples, 0.14%)</title><rect x="49.4192%" y="165" width="0.1383%" height="15" fill="rgb(207,7,3)" fg:x="1787" fg:w="5"/><text x="49.6692%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.11%)</title><rect x="49.4469%" y="149" width="0.1106%" height="15" fill="rgb(206,98,19)" fg:x="1788" fg:w="4"/><text x="49.6969%" y="159.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (2 samples, 0.06%)</title><rect x="49.5575%" y="181" width="0.0553%" height="15" fill="rgb(217,5,26)" fg:x="1792" fg:w="2"/><text x="49.8075%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.06%)</title><rect x="49.5575%" y="165" width="0.0553%" height="15" fill="rgb(235,190,38)" fg:x="1792" fg:w="2"/><text x="49.8075%" y="175.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (800 samples, 22.12%)</title><rect x="29.0929%" y="213" width="22.1239%" height="15" fill="rgb(247,86,24)" fg:x="1052" fg:w="800"/><text x="29.3429%" y="223.50">bench`rayon_core::join::join_contex..</text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (101 samples, 2.79%)</title><rect x="48.4237%" y="197" width="2.7931%" height="15" fill="rgb(205,101,16)" fg:x="1751" fg:w="101"/><text x="48.6737%" y="207.50">be..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (58 samples, 1.60%)</title><rect x="49.6128%" y="181" width="1.6040%" height="15" fill="rgb(246,168,33)" fg:x="1794" fg:w="58"/><text x="49.8628%" y="191.50"></text></g><g><title>bench`rayon_core::registry::WORKER_THREAD_STATE::__getit (1 samples, 0.03%)</title><rect x="51.2168%" y="213" width="0.0277%" height="15" fill="rgb(231,114,1)" fg:x="1852" fg:w="1"/><text x="51.4668%" y="223.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (1,459 samples, 40.35%)</title><rect x="10.9237%" y="229" width="40.3485%" height="15" fill="rgb(207,184,53)" fg:x="395" fg:w="1459"/><text x="11.1737%" y="239.50">bench`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>bench`rayon_core::sleep::counters::AtomicCounters::increment_jobs_event_counter_if (1 samples, 0.03%)</title><rect x="51.2445%" y="213" width="0.0277%" height="15" fill="rgb(224,95,51)" fg:x="1853" fg:w="1"/><text x="51.4945%" y="223.50"></text></g><g><title>bench`crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.03%)</title><rect x="51.2998%" y="149" width="0.0277%" height="15" fill="rgb(212,188,45)" fg:x="1855" fg:w="1"/><text x="51.5498%" y="159.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (3 samples, 0.08%)</title><rect x="51.3827%" y="101" width="0.0830%" height="15" fill="rgb(223,154,38)" fg:x="1858" fg:w="3"/><text x="51.6327%" y="111.50"></text></g><g><title>bench`OUTLINED_FUNCTION_2239 (1 samples, 0.03%)</title><rect x="51.4657%" y="101" width="0.0277%" height="15" fill="rgb(251,22,52)" fg:x="1861" fg:w="1"/><text x="51.7157%" y="111.50"></text></g><g><title>bench`OUTLINED_FUNCTION_892 (14 samples, 0.39%)</title><rect x="51.4934%" y="101" width="0.3872%" height="15" fill="rgb(229,209,22)" fg:x="1862" fg:w="14"/><text x="51.7434%" y="111.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (184 samples, 5.09%)</title><rect x="51.8805%" y="101" width="5.0885%" height="15" fill="rgb(234,138,34)" fg:x="1876" fg:w="184"/><text x="52.1305%" y="111.50">bench`..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (1 samples, 0.03%)</title><rect x="56.9690%" y="101" width="0.0277%" height="15" fill="rgb(212,95,11)" fg:x="2060" fg:w="1"/><text x="57.2190%" y="111.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x3 (1 samples, 0.03%)</title><rect x="56.9967%" y="101" width="0.0277%" height="15" fill="rgb(240,179,47)" fg:x="2061" fg:w="1"/><text x="57.2467%" y="111.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (216 samples, 5.97%)</title><rect x="51.3551%" y="117" width="5.9735%" height="15" fill="rgb(240,163,11)" fg:x="1857" fg:w="216"/><text x="51.6051%" y="127.50">bench`ge..</text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (11 samples, 0.30%)</title><rect x="57.0243%" y="101" width="0.3042%" height="15" fill="rgb(236,37,12)" fg:x="2062" fg:w="11"/><text x="57.2743%" y="111.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x1 (1 samples, 0.03%)</title><rect x="57.3285%" y="117" width="0.0277%" height="15" fill="rgb(232,164,16)" fg:x="2073" fg:w="1"/><text x="57.5785%" y="127.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (219 samples, 6.06%)</title><rect x="51.3274%" y="133" width="6.0564%" height="15" fill="rgb(244,205,15)" fg:x="1856" fg:w="219"/><text x="51.5774%" y="143.50">bench`ge..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="57.3562%" y="117" width="0.0277%" height="15" fill="rgb(223,117,47)" fg:x="2074" fg:w="1"/><text x="57.6062%" y="127.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (222 samples, 6.14%)</title><rect x="51.3274%" y="149" width="6.1394%" height="15" fill="rgb(244,107,35)" fg:x="1856" fg:w="222"/><text x="51.5774%" y="159.50">bench`ra..</text></g><g><title>bench`gemm_common::pack_operands::pack_rhs (3 samples, 0.08%)</title><rect x="57.3838%" y="133" width="0.0830%" height="15" fill="rgb(205,140,8)" fg:x="2075" fg:w="3"/><text x="57.6338%" y="143.50"></text></g><g><title>bench`OUTLINED_FUNCTION_1057 (1 samples, 0.03%)</title><rect x="57.5221%" y="69" width="0.0277%" height="15" fill="rgb(228,84,46)" fg:x="2080" fg:w="1"/><text x="57.7721%" y="79.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (37 samples, 1.02%)</title><rect x="57.5498%" y="69" width="1.0232%" height="15" fill="rgb(254,188,9)" fg:x="2081" fg:w="37"/><text x="57.7998%" y="79.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x2 (1 samples, 0.03%)</title><rect x="58.5730%" y="69" width="0.0277%" height="15" fill="rgb(206,112,54)" fg:x="2118" fg:w="1"/><text x="58.8230%" y="79.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (40 samples, 1.11%)</title><rect x="57.5221%" y="101" width="1.1062%" height="15" fill="rgb(216,84,49)" fg:x="2080" fg:w="40"/><text x="57.7721%" y="111.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (40 samples, 1.11%)</title><rect x="57.5221%" y="85" width="1.1062%" height="15" fill="rgb(214,194,35)" fg:x="2080" fg:w="40"/><text x="57.7721%" y="95.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (1 samples, 0.03%)</title><rect x="58.6007%" y="69" width="0.0277%" height="15" fill="rgb(249,28,3)" fg:x="2119" fg:w="1"/><text x="58.8507%" y="79.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (43 samples, 1.19%)</title><rect x="57.5221%" y="133" width="1.1892%" height="15" fill="rgb(222,56,52)" fg:x="2080" fg:w="43"/><text x="57.7721%" y="143.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 1.19%)</title><rect x="57.5221%" y="117" width="1.1892%" height="15" fill="rgb(245,217,50)" fg:x="2080" fg:w="43"/><text x="57.7721%" y="127.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (3 samples, 0.08%)</title><rect x="58.6283%" y="101" width="0.0830%" height="15" fill="rgb(213,201,24)" fg:x="2120" fg:w="3"/><text x="58.8783%" y="111.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.08%)</title><rect x="58.6283%" y="85" width="0.0830%" height="15" fill="rgb(248,116,28)" fg:x="2120" fg:w="3"/><text x="58.8783%" y="95.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (3 samples, 0.08%)</title><rect x="58.6283%" y="69" width="0.0830%" height="15" fill="rgb(219,72,43)" fg:x="2120" fg:w="3"/><text x="58.8783%" y="79.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (3 samples, 0.08%)</title><rect x="58.6283%" y="53" width="0.0830%" height="15" fill="rgb(209,138,14)" fg:x="2120" fg:w="3"/><text x="58.8783%" y="63.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (3 samples, 0.08%)</title><rect x="58.6283%" y="37" width="0.0830%" height="15" fill="rgb(222,18,33)" fg:x="2120" fg:w="3"/><text x="58.8783%" y="47.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::take_local_job (1 samples, 0.03%)</title><rect x="58.7113%" y="133" width="0.0277%" height="15" fill="rgb(213,199,7)" fg:x="2123" fg:w="1"/><text x="58.9613%" y="143.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.03%)</title><rect x="58.7113%" y="117" width="0.0277%" height="15" fill="rgb(250,110,10)" fg:x="2123" fg:w="1"/><text x="58.9613%" y="127.50"></text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (1 samples, 0.03%)</title><rect x="58.7113%" y="101" width="0.0277%" height="15" fill="rgb(248,123,6)" fg:x="2123" fg:w="1"/><text x="58.9613%" y="111.50"></text></g><g><title>bench`std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="58.7389%" y="101" width="0.0277%" height="15" fill="rgb(206,91,31)" fg:x="2124" fg:w="1"/><text x="58.9889%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="58.7389%" y="85" width="0.0277%" height="15" fill="rgb(211,154,13)" fg:x="2124" fg:w="1"/><text x="58.9889%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.03%)</title><rect x="58.7389%" y="69" width="0.0277%" height="15" fill="rgb(225,148,7)" fg:x="2124" fg:w="1"/><text x="58.9889%" y="79.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (2 samples, 0.06%)</title><rect x="58.7389%" y="133" width="0.0553%" height="15" fill="rgb(220,160,43)" fg:x="2124" fg:w="2"/><text x="58.9889%" y="143.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (2 samples, 0.06%)</title><rect x="58.7389%" y="117" width="0.0553%" height="15" fill="rgb(213,52,39)" fg:x="2124" fg:w="2"/><text x="58.9889%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="58.7666%" y="101" width="0.0277%" height="15" fill="rgb(243,137,7)" fg:x="2125" fg:w="1"/><text x="59.0166%" y="111.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (74 samples, 2.05%)</title><rect x="57.4668%" y="149" width="2.0465%" height="15" fill="rgb(230,79,13)" fg:x="2078" fg:w="74"/><text x="57.7168%" y="159.50">b..</text></g><g><title>libsystem_kernel.dylib`swtch_pri (26 samples, 0.72%)</title><rect x="58.7942%" y="133" width="0.7190%" height="15" fill="rgb(247,105,23)" fg:x="2126" fg:w="26"/><text x="59.0442%" y="143.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (300 samples, 8.30%)</title><rect x="51.2998%" y="165" width="8.2965%" height="15" fill="rgb(223,179,41)" fg:x="1855" fg:w="300"/><text x="51.5498%" y="175.50">bench`rayon_..</text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (3 samples, 0.08%)</title><rect x="59.5133%" y="149" width="0.0830%" height="15" fill="rgb(218,9,34)" fg:x="2152" fg:w="3"/><text x="59.7633%" y="159.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (3 samples, 0.08%)</title><rect x="59.5133%" y="133" width="0.0830%" height="15" fill="rgb(222,106,8)" fg:x="2152" fg:w="3"/><text x="59.7633%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3 samples, 0.08%)</title><rect x="59.5133%" y="117" width="0.0830%" height="15" fill="rgb(211,220,0)" fg:x="2152" fg:w="3"/><text x="59.7633%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (3 samples, 0.08%)</title><rect x="59.5133%" y="101" width="0.0830%" height="15" fill="rgb(229,52,16)" fg:x="2152" fg:w="3"/><text x="59.7633%" y="111.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (301 samples, 8.32%)</title><rect x="51.2998%" y="181" width="8.3241%" height="15" fill="rgb(212,155,18)" fg:x="1855" fg:w="301"/><text x="51.5498%" y="191.50">bench`rayon:..</text></g><g><title>bench`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="59.5962%" y="165" width="0.0277%" height="15" fill="rgb(242,21,14)" fg:x="2155" fg:w="1"/><text x="59.8462%" y="175.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (2 samples, 0.06%)</title><rect x="59.6515%" y="101" width="0.0553%" height="15" fill="rgb(222,19,48)" fg:x="2157" fg:w="2"/><text x="59.9015%" y="111.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3 samples, 0.08%)</title><rect x="59.6515%" y="165" width="0.0830%" height="15" fill="rgb(232,45,27)" fg:x="2157" fg:w="3"/><text x="59.9015%" y="175.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (3 samples, 0.08%)</title><rect x="59.6515%" y="149" width="0.0830%" height="15" fill="rgb(249,103,42)" fg:x="2157" fg:w="3"/><text x="59.9015%" y="159.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (3 samples, 0.08%)</title><rect x="59.6515%" y="133" width="0.0830%" height="15" fill="rgb(246,81,33)" fg:x="2157" fg:w="3"/><text x="59.9015%" y="143.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (3 samples, 0.08%)</title><rect x="59.6515%" y="117" width="0.0830%" height="15" fill="rgb(252,33,42)" fg:x="2157" fg:w="3"/><text x="59.9015%" y="127.50"></text></g><g><title>bench`gemm_f32::microkernel::neon::f32::x4x4 (1 samples, 0.03%)</title><rect x="59.7069%" y="101" width="0.0277%" height="15" fill="rgb(209,212,41)" fg:x="2159" fg:w="1"/><text x="59.9569%" y="111.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="59.7345%" y="165" width="0.0277%" height="15" fill="rgb(207,154,6)" fg:x="2160" fg:w="1"/><text x="59.9845%" y="175.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.03%)</title><rect x="59.7345%" y="149" width="0.0277%" height="15" fill="rgb(223,64,47)" fg:x="2160" fg:w="1"/><text x="59.9845%" y="159.50"></text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (1 samples, 0.03%)</title><rect x="59.7345%" y="133" width="0.0277%" height="15" fill="rgb(211,161,38)" fg:x="2160" fg:w="1"/><text x="59.9845%" y="143.50"></text></g><g><title>bench`crossbeam_epoch::internal::Global::collect (1 samples, 0.03%)</title><rect x="59.7345%" y="117" width="0.0277%" height="15" fill="rgb(219,138,40)" fg:x="2160" fg:w="1"/><text x="59.9845%" y="127.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::take_local_job (1 samples, 0.03%)</title><rect x="59.7622%" y="165" width="0.0277%" height="15" fill="rgb(241,228,46)" fg:x="2161" fg:w="1"/><text x="60.0122%" y="175.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.03%)</title><rect x="59.7622%" y="149" width="0.0277%" height="15" fill="rgb(223,209,38)" fg:x="2161" fg:w="1"/><text x="60.0122%" y="159.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (1 samples, 0.03%)</title><rect x="59.7622%" y="133" width="0.0277%" height="15" fill="rgb(236,164,45)" fg:x="2161" fg:w="1"/><text x="60.0122%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.03%)</title><rect x="59.7622%" y="117" width="0.0277%" height="15" fill="rgb(231,15,5)" fg:x="2161" fg:w="1"/><text x="60.0122%" y="127.50"></text></g><g><title>bench`std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="59.7898%" y="133" width="0.0277%" height="15" fill="rgb(252,35,15)" fg:x="2162" fg:w="1"/><text x="60.0398%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="59.7898%" y="117" width="0.0277%" height="15" fill="rgb(248,181,18)" fg:x="2162" fg:w="1"/><text x="60.0398%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.03%)</title><rect x="59.7898%" y="101" width="0.0277%" height="15" fill="rgb(233,39,42)" fg:x="2162" fg:w="1"/><text x="60.0398%" y="111.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (2 samples, 0.06%)</title><rect x="59.7898%" y="165" width="0.0553%" height="15" fill="rgb(238,110,33)" fg:x="2162" fg:w="2"/><text x="60.0398%" y="175.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (2 samples, 0.06%)</title><rect x="59.7898%" y="149" width="0.0553%" height="15" fill="rgb(233,195,10)" fg:x="2162" fg:w="2"/><text x="60.0398%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.03%)</title><rect x="59.8175%" y="133" width="0.0277%" height="15" fill="rgb(254,105,3)" fg:x="2163" fg:w="1"/><text x="60.0675%" y="143.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (1 samples, 0.03%)</title><rect x="59.8451%" y="165" width="0.0277%" height="15" fill="rgb(221,225,9)" fg:x="2164" fg:w="1"/><text x="60.0951%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.03%)</title><rect x="59.8451%" y="149" width="0.0277%" height="15" fill="rgb(224,227,45)" fg:x="2164" fg:w="1"/><text x="60.0951%" y="159.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (40 samples, 1.11%)</title><rect x="59.6239%" y="181" width="1.1062%" height="15" fill="rgb(229,198,43)" fg:x="2156" fg:w="40"/><text x="59.8739%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (31 samples, 0.86%)</title><rect x="59.8728%" y="165" width="0.8573%" height="15" fill="rgb(206,209,35)" fg:x="2165" fg:w="31"/><text x="60.1228%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.11%)</title><rect x="60.7301%" y="149" width="0.1106%" height="15" fill="rgb(245,195,53)" fg:x="2196" fg:w="4"/><text x="60.9801%" y="159.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (347 samples, 9.60%)</title><rect x="51.2721%" y="213" width="9.5962%" height="15" fill="rgb(240,92,26)" fg:x="1854" fg:w="347"/><text x="51.5221%" y="223.50">bench`rayon::i..</text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (347 samples, 9.60%)</title><rect x="51.2721%" y="197" width="9.5962%" height="15" fill="rgb(207,40,23)" fg:x="1854" fg:w="347"/><text x="51.5221%" y="207.50">bench`rayon_co..</text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (5 samples, 0.14%)</title><rect x="60.7301%" y="181" width="0.1383%" height="15" fill="rgb(223,111,35)" fg:x="2196" fg:w="5"/><text x="60.9801%" y="191.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (5 samples, 0.14%)</title><rect x="60.7301%" y="165" width="0.1383%" height="15" fill="rgb(229,147,28)" fg:x="2196" fg:w="5"/><text x="60.9801%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="60.8407%" y="149" width="0.0277%" height="15" fill="rgb(211,29,28)" fg:x="2200" fg:w="1"/><text x="61.0907%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="60.8407%" y="133" width="0.0277%" height="15" fill="rgb(228,72,33)" fg:x="2200" fg:w="1"/><text x="61.0907%" y="143.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (2 samples, 0.06%)</title><rect x="60.8960%" y="197" width="0.0553%" height="15" fill="rgb(205,214,31)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="207.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.06%)</title><rect x="60.8960%" y="181" width="0.0553%" height="15" fill="rgb(224,111,15)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="191.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (2 samples, 0.06%)</title><rect x="60.8960%" y="165" width="0.0553%" height="15" fill="rgb(253,21,26)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="175.50"></text></g><g><title>bench`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.06%)</title><rect x="60.8960%" y="149" width="0.0553%" height="15" fill="rgb(245,139,43)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="159.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (2 samples, 0.06%)</title><rect x="60.8960%" y="133" width="0.0553%" height="15" fill="rgb(252,170,7)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="143.50"></text></g><g><title>bench`gemm_common::gemm::gemm_basic_generic::_{{closure}} (2 samples, 0.06%)</title><rect x="60.8960%" y="117" width="0.0553%" height="15" fill="rgb(231,118,14)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="127.50"></text></g><g><title>bench`gemm_common::pack_operands::pack_lhs (2 samples, 0.06%)</title><rect x="60.8960%" y="101" width="0.0553%" height="15" fill="rgb(238,83,0)" fg:x="2202" fg:w="2"/><text x="61.1460%" y="111.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="60.9513%" y="197" width="0.0277%" height="15" fill="rgb(221,39,39)" fg:x="2204" fg:w="1"/><text x="61.2013%" y="207.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.03%)</title><rect x="60.9513%" y="181" width="0.0277%" height="15" fill="rgb(222,119,46)" fg:x="2204" fg:w="1"/><text x="61.2013%" y="191.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (2 samples, 0.06%)</title><rect x="60.9790%" y="197" width="0.0553%" height="15" fill="rgb(222,165,49)" fg:x="2205" fg:w="2"/><text x="61.2290%" y="207.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (2 samples, 0.06%)</title><rect x="60.9790%" y="181" width="0.0553%" height="15" fill="rgb(219,113,52)" fg:x="2205" fg:w="2"/><text x="61.2290%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.06%)</title><rect x="60.9790%" y="165" width="0.0553%" height="15" fill="rgb(214,7,15)" fg:x="2205" fg:w="2"/><text x="61.2290%" y="175.50"></text></g><g><title>bench`rayon_core::join::join_context::_{{closure}} (375 samples, 10.37%)</title><rect x="51.2721%" y="229" width="10.3706%" height="15" fill="rgb(235,32,4)" fg:x="1854" fg:w="375"/><text x="51.5221%" y="239.50">bench`rayon_cor..</text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (28 samples, 0.77%)</title><rect x="60.8684%" y="213" width="0.7743%" height="15" fill="rgb(238,90,54)" fg:x="2201" fg:w="28"/><text x="61.1184%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (22 samples, 0.61%)</title><rect x="61.0343%" y="197" width="0.6084%" height="15" fill="rgb(213,208,19)" fg:x="2207" fg:w="22"/><text x="61.2843%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (13 samples, 0.36%)</title><rect x="61.6427%" y="229" width="0.3595%" height="15" fill="rgb(233,156,4)" fg:x="2229" fg:w="13"/><text x="61.8927%" y="239.50"></text></g><g><title>bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1,849 samples, 51.13%)</title><rect x="10.8960%" y="245" width="51.1338%" height="15" fill="rgb(207,194,5)" fg:x="394" fg:w="1849"/><text x="11.1460%" y="255.50">bench`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>libsystem_pthread.dylib`pthread_cond_broadcast (1 samples, 0.03%)</title><rect x="62.0022%" y="229" width="0.0277%" height="15" fill="rgb(206,111,30)" fg:x="2242" fg:w="1"/><text x="62.2522%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_249 (1 samples, 0.03%)</title><rect x="62.0299%" y="245" width="0.0277%" height="15" fill="rgb(243,70,54)" fg:x="2243" fg:w="1"/><text x="62.2799%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_3666 (2 samples, 0.06%)</title><rect x="62.0575%" y="245" width="0.0553%" height="15" fill="rgb(242,28,8)" fg:x="2244" fg:w="2"/><text x="62.3075%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_523 (1 samples, 0.03%)</title><rect x="62.1128%" y="245" width="0.0277%" height="15" fill="rgb(219,106,18)" fg:x="2246" fg:w="1"/><text x="62.3628%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_6152 (1 samples, 0.03%)</title><rect x="62.1405%" y="245" width="0.0277%" height="15" fill="rgb(244,222,10)" fg:x="2247" fg:w="1"/><text x="62.3905%" y="255.50"></text></g><g><title>bench`OUTLINED_FUNCTION_4578 (3 samples, 0.08%)</title><rect x="62.9148%" y="213" width="0.0830%" height="15" fill="rgb(236,179,52)" fg:x="2275" fg:w="3"/><text x="63.1648%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (6 samples, 0.17%)</title><rect x="62.9978%" y="213" width="0.1659%" height="15" fill="rgb(213,23,39)" fg:x="2278" fg:w="6"/><text x="63.2478%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (5 samples, 0.14%)</title><rect x="63.1637%" y="213" width="0.1383%" height="15" fill="rgb(238,48,10)" fg:x="2284" fg:w="5"/><text x="63.4137%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (10 samples, 0.28%)</title><rect x="63.3020%" y="213" width="0.2765%" height="15" fill="rgb(251,196,23)" fg:x="2289" fg:w="10"/><text x="63.5520%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::internal::Global::collect (3 samples, 0.08%)</title><rect x="63.4956%" y="197" width="0.0830%" height="15" fill="rgb(250,152,24)" fg:x="2296" fg:w="3"/><text x="63.7456%" y="207.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (4 samples, 0.11%)</title><rect x="63.5785%" y="197" width="0.1106%" height="15" fill="rgb(209,150,17)" fg:x="2299" fg:w="4"/><text x="63.8285%" y="207.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (20 samples, 0.55%)</title><rect x="63.5785%" y="213" width="0.5531%" height="15" fill="rgb(234,202,34)" fg:x="2299" fg:w="20"/><text x="63.8285%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (16 samples, 0.44%)</title><rect x="63.6892%" y="197" width="0.4425%" height="15" fill="rgb(253,148,53)" fg:x="2303" fg:w="16"/><text x="63.9392%" y="207.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (61 samples, 1.69%)</title><rect x="62.6106%" y="229" width="1.6869%" height="15" fill="rgb(218,129,16)" fg:x="2264" fg:w="61"/><text x="62.8606%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.17%)</title><rect x="64.1316%" y="213" width="0.1659%" height="15" fill="rgb(216,85,19)" fg:x="2319" fg:w="6"/><text x="64.3816%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (4 samples, 0.11%)</title><rect x="64.2976%" y="229" width="0.1106%" height="15" fill="rgb(235,228,7)" fg:x="2325" fg:w="4"/><text x="64.5476%" y="239.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (1 samples, 0.03%)</title><rect x="64.4082%" y="229" width="0.0277%" height="15" fill="rgb(245,175,0)" fg:x="2329" fg:w="1"/><text x="64.6582%" y="239.50"></text></g><g><title>bench`core::iter::adapters::filter::filter_try_fold::_{{closure}} (84 samples, 2.32%)</title><rect x="62.1681%" y="245" width="2.3230%" height="15" fill="rgb(208,168,36)" fg:x="2248" fg:w="84"/><text x="62.4181%" y="255.50">b..</text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (2 samples, 0.06%)</title><rect x="64.4358%" y="229" width="0.0553%" height="15" fill="rgb(246,171,24)" fg:x="2330" fg:w="2"/><text x="64.6858%" y="239.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;crossbeam_epoch::guard::Guard&gt; (5 samples, 0.14%)</title><rect x="64.4912%" y="245" width="0.1383%" height="15" fill="rgb(215,142,24)" fg:x="2332" fg:w="5"/><text x="64.7412%" y="255.50"></text></g><g><title>bench`core::ptr::drop_in_place&lt;rayon_core::job::JobResult&lt;()&gt;&gt; (1 samples, 0.03%)</title><rect x="64.6294%" y="245" width="0.0277%" height="15" fill="rgb(250,187,7)" fg:x="2337" fg:w="1"/><text x="64.8794%" y="255.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (4 samples, 0.11%)</title><rect x="64.6571%" y="245" width="0.1106%" height="15" fill="rgb(228,66,33)" fg:x="2338" fg:w="4"/><text x="64.9071%" y="255.50"></text></g><g><title>bench`crossbeam_deque::deque::Worker&lt;T&gt;::pop (1 samples, 0.03%)</title><rect x="64.7677%" y="245" width="0.0277%" height="15" fill="rgb(234,215,21)" fg:x="2342" fg:w="1"/><text x="65.0177%" y="255.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (3 samples, 0.08%)</title><rect x="64.8507%" y="213" width="0.0830%" height="15" fill="rgb(222,191,20)" fg:x="2345" fg:w="3"/><text x="65.1007%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::default::pin::_{{closure}} (3 samples, 0.08%)</title><rect x="64.9336%" y="213" width="0.0830%" height="15" fill="rgb(245,79,54)" fg:x="2348" fg:w="3"/><text x="65.1836%" y="223.50"></text></g><g><title>bench`crossbeam_epoch::internal::Global::collect (2 samples, 0.06%)</title><rect x="64.9613%" y="197" width="0.0553%" height="15" fill="rgb(240,10,37)" fg:x="2349" fg:w="2"/><text x="65.2113%" y="207.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (2 samples, 0.06%)</title><rect x="65.0166%" y="197" width="0.0553%" height="15" fill="rgb(214,192,32)" fg:x="2351" fg:w="2"/><text x="65.2666%" y="207.50"></text></g><g><title>bench`crossbeam_epoch::default::pin (8 samples, 0.22%)</title><rect x="65.0166%" y="213" width="0.2212%" height="15" fill="rgb(209,36,54)" fg:x="2351" fg:w="8"/><text x="65.2666%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.17%)</title><rect x="65.0719%" y="197" width="0.1659%" height="15" fill="rgb(220,10,11)" fg:x="2353" fg:w="6"/><text x="65.3219%" y="207.50"></text></g><g><title>bench`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (21 samples, 0.58%)</title><rect x="64.7954%" y="229" width="0.5808%" height="15" fill="rgb(221,106,17)" fg:x="2343" fg:w="21"/><text x="65.0454%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.14%)</title><rect x="65.2378%" y="213" width="0.1383%" height="15" fill="rgb(251,142,44)" fg:x="2359" fg:w="5"/><text x="65.4878%" y="223.50"></text></g><g><title>bench`rayon_core::registry::WorkerThread::take_local_job (22 samples, 0.61%)</title><rect x="64.7954%" y="245" width="0.6084%" height="15" fill="rgb(238,13,15)" fg:x="2343" fg:w="22"/><text x="65.0454%" y="255.50"></text></g><g><title>bench`crossbeam_epoch::default::HANDLE::__getit (1 samples, 0.03%)</title><rect x="65.3761%" y="229" width="0.0277%" height="15" fill="rgb(208,107,27)" fg:x="2364" fg:w="1"/><text x="65.6261%" y="239.50"></text></g><g><title>bench`OUTLINED_FUNCTION_2495 (1 samples, 0.03%)</title><rect x="65.4038%" y="213" width="0.0277%" height="15" fill="rgb(205,136,37)" fg:x="2365" fg:w="1"/><text x="65.6538%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (19 samples, 0.53%)</title><rect x="65.4591%" y="197" width="0.5254%" height="15" fill="rgb(250,205,27)" fg:x="2367" fg:w="19"/><text x="65.7091%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (19 samples, 0.53%)</title><rect x="65.4591%" y="181" width="0.5254%" height="15" fill="rgb(210,80,43)" fg:x="2367" fg:w="19"/><text x="65.7091%" y="191.50"></text></g><g><title>bench`std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.61%)</title><rect x="65.4314%" y="213" width="0.6084%" height="15" fill="rgb(247,160,36)" fg:x="2366" fg:w="22"/><text x="65.6814%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.06%)</title><rect x="65.9845%" y="197" width="0.0553%" height="15" fill="rgb(234,13,49)" fg:x="2386" fg:w="2"/><text x="66.2345%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (21 samples, 0.58%)</title><rect x="66.0398%" y="213" width="0.5808%" height="15" fill="rgb(234,122,0)" fg:x="2388" fg:w="21"/><text x="66.2898%" y="223.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_any_threads (49 samples, 1.36%)</title><rect x="65.4038%" y="245" width="1.3551%" height="15" fill="rgb(207,146,38)" fg:x="2365" fg:w="49"/><text x="65.6538%" y="255.50"></text></g><g><title>bench`rayon_core::sleep::Sleep::wake_specific_thread (49 samples, 1.36%)</title><rect x="65.4038%" y="229" width="1.3551%" height="15" fill="rgb(207,177,25)" fg:x="2365" fg:w="49"/><text x="65.6538%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (5 samples, 0.14%)</title><rect x="66.6206%" y="213" width="0.1383%" height="15" fill="rgb(211,178,42)" fg:x="2409" fg:w="5"/><text x="66.8706%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (5 samples, 0.14%)</title><rect x="66.6206%" y="197" width="0.1383%" height="15" fill="rgb(230,69,54)" fg:x="2409" fg:w="5"/><text x="66.8706%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (57 samples, 1.58%)</title><rect x="66.7588%" y="229" width="1.5763%" height="15" fill="rgb(214,135,41)" fg:x="2414" fg:w="57"/><text x="67.0088%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (5 samples, 0.14%)</title><rect x="68.3352%" y="229" width="0.1383%" height="15" fill="rgb(237,67,25)" fg:x="2471" fg:w="5"/><text x="68.5852%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (4 samples, 0.11%)</title><rect x="68.3628%" y="213" width="0.1106%" height="15" fill="rgb(222,189,50)" fg:x="2472" fg:w="4"/><text x="68.6128%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (4 samples, 0.11%)</title><rect x="68.3628%" y="197" width="0.1106%" height="15" fill="rgb(245,148,34)" fg:x="2472" fg:w="4"/><text x="68.6128%" y="207.50"></text></g><g><title>bench`std::sync::condvar::Condvar::wait (63 samples, 1.74%)</title><rect x="66.7588%" y="245" width="1.7423%" height="15" fill="rgb(222,29,6)" fg:x="2414" fg:w="63"/><text x="67.0088%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.03%)</title><rect x="68.4735%" y="229" width="0.0277%" height="15" fill="rgb(221,189,43)" fg:x="2476" fg:w="1"/><text x="68.7235%" y="239.50"></text></g><g><title>bench`std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.03%)</title><rect x="68.5011%" y="245" width="0.0277%" height="15" fill="rgb(207,36,27)" fg:x="2477" fg:w="1"/><text x="68.7511%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.03%)</title><rect x="68.5011%" y="229" width="0.0277%" height="15" fill="rgb(217,90,24)" fg:x="2477" fg:w="1"/><text x="68.7511%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1,131 samples, 31.28%)</title><rect x="68.5288%" y="245" width="31.2777%" height="15" fill="rgb(224,66,35)" fg:x="2478" fg:w="1131"/><text x="68.7788%" y="255.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (1 samples, 0.03%)</title><rect x="99.8064%" y="245" width="0.0277%" height="15" fill="rgb(221,13,50)" fg:x="3609" fg:w="1"/><text x="100.0564%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (3 samples, 0.08%)</title><rect x="99.8341%" y="245" width="0.0830%" height="15" fill="rgb(236,68,49)" fg:x="3610" fg:w="3"/><text x="100.0841%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (3 samples, 0.08%)</title><rect x="99.8341%" y="229" width="0.0830%" height="15" fill="rgb(229,146,28)" fg:x="3610" fg:w="3"/><text x="100.0841%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (2 samples, 0.06%)</title><rect x="99.9170%" y="245" width="0.0553%" height="15" fill="rgb(225,31,38)" fg:x="3613" fg:w="2"/><text x="100.1670%" y="255.50"></text></g><g><title>all (3,616 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(250,208,3)" fg:x="0" fg:w="3616"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,249 samples, 89.85%)</title><rect x="10.1493%" y="341" width="89.8507%" height="15" fill="rgb(246,54,23)" fg:x="367" fg:w="3249"/><text x="10.3993%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,249 samples, 89.85%)</title><rect x="10.1493%" y="325" width="89.8507%" height="15" fill="rgb(243,76,11)" fg:x="367" fg:w="3249"/><text x="10.3993%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>bench`std::sys::pal::unix::thread::Thread::new::thread_start (3,249 samples, 89.85%)</title><rect x="10.1493%" y="309" width="89.8507%" height="15" fill="rgb(245,21,50)" fg:x="367" fg:w="3249"/><text x="10.3993%" y="319.50">bench`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>bench`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,249 samples, 89.85%)</title><rect x="10.1493%" y="293" width="89.8507%" height="15" fill="rgb(228,9,43)" fg:x="367" fg:w="3249"/><text x="10.3993%" y="303.50">bench`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>bench`std::sys_common::backtrace::__rust_begin_short_backtrace (3,249 samples, 89.85%)</title><rect x="10.1493%" y="277" width="89.8507%" height="15" fill="rgb(208,100,47)" fg:x="367" fg:w="3249"/><text x="10.3993%" y="287.50">bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench`rayon_core::registry::WorkerThread::wait_until_cold (3,244 samples, 89.71%)</title><rect x="10.2876%" y="261" width="89.7124%" height="15" fill="rgb(232,26,8)" fg:x="372" fg:w="3244"/><text x="10.5376%" y="271.50">bench`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="99.9723%" y="245" width="0.0277%" height="15" fill="rgb(216,166,38)" fg:x="3615" fg:w="1"/><text x="100.2223%" y="255.50"></text></g></svg></svg>